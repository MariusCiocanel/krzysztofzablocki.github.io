<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Process | Krzysztof Zabłocki]]></title>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/categories/process/atom.xml" rel="self"/>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/"/>
  <updated>2015-05-05T03:51:35+02:00</updated>
  <id>http://krzysztofzablocki.github.com/krzysztofzablocki/</id>
  <author>
    <name><![CDATA[Krzysztof Zabłocki]]></name>
    <email><![CDATA[krzysztof.zablocki@pixle.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playgrounds for Objective-C]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/playgrounds-for-objective-c"/>
    <updated>2014-10-23T12:03:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/playgrounds-for-objective-c</id>
    <content type="html"><![CDATA[<p>Everyone loves Swift playgrounds, they are awesome, Apple has made amazing job with Xcode 6 and Playgrounds were the icying on the cake.</p>

<p>But since most of us still need to write Objective-C I've created Playgrounds for Objective-C:</p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/109757619 "></iframe></div></p>

<h3>Features</h3>

<ul>
<li>Faster than Swift playgrounds (a lot)</li>
<li>Extra controls for tweaking:</li>
<li>Adjustable values</li>
<li>Autoanimated values</li>
<li>Buttons</li>
<li>IDE agnostic, once you run it, you can modify the code even from vim.</li>
<li>Full iOS simulator and access to all iOS features, so you can prototype production ready code.</li>
<li>Nice DSL for rapid prototyping</li>
<li>CocoaPods support, so you can add it to existing projects to experiment</li>
<li>Open source, anyone can contribute to make them better!</li>
</ul>


<p>And it’s just a start.</p>

<p><a href="https://github.com/krzysztofzablocki/KZPlayground">Source code on GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I work?]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/how-do-i-work"/>
    <updated>2014-10-06T15:21:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/how-do-i-work</id>
    <content type="html"><![CDATA[<p>I’ve been programming for 18 years now, doing commercial work for the last 6, over the years I’ve been exposed to different ideas and experiences that have constantly affect the way I write code, what matters and how I go about working for my clients. I’d like to share some insights in what is my current approach to few common topics.</p>

<!-- more -->


<p>Over last 3 years I’ve been mostly tasked with hands-on leadership roles, my goals were to deliver project on time and with good quality.</p>

<h2>Mindset - Put yourself in your clients shoes</h2>

<p>Whenever working on a project I like to think about it as my own project, I try to understand not only technical aspects of the project but also its business goals.</p>

<p>Care deeply and it's easier to deliver quality work, avoiding shortcuts and making sure the client will succeed, and if they succeed then they’ll probably come back to you. It’s a win-win.</p>

<h2>Establishing consistency when joining new teams</h2>

<p>Whenever I join new team, I like to know if there are any established convention for code style, quality and similar.</p>

<p>If there aren’t, I share my guidelines and process description and ask the rest of the team to read it and then have a discussion if they agree with it or we should adjust some things.</p>

<p>One has to remember that code style is subjective and there usually isn’t a right or wrong answer, what matters, though, is consistency.</p>

<p>I’ve no problem using someone else's code style but I wouldn’t want to work on a project that has inconsistent style / approach to coding as this is a sign of low quality.</p>

<p>It’s important to learn your team-members strong and weak sides and get to know them as people, not just developers.</p>

<h2>Code Quality</h2>

<p>Quality is something I’m not really willing to negotiate on, I want the projects I work on to at least have:</p>

<ul>
<li>-Weverything - enable all warnings as default, disable  some selectively</li>
<li>Treat warnings as errors - there are proper reasons warnings exist</li>
<li>Add Guards for UIKit/CoreData + threading</li>
<li>Scripts that will raise developer attention for TODO/s and code smells</li>
</ul>


<p>I would also prefer to have BDD tests in the project. I prefer BDD over TDD as it’s more focused on what matters for the client, I will use TDD when working on a library or some reusable part of the app but keep BDD for more general code.</p>

<p>Many people think tests make you slower, but even if we put long-term effects of quality aside (tests are definitely worth it in long run) you can also see that tests can actually allow you to iterate quickly:</p>

<ul>
<li>If you are blocked by lack of API endpoints you can mock your data and still implement your part of the logic</li>
<li>Executing tests is usually much faster than running whole app and navigating to specific feature, I can adjust and run few iterations of tests in the time it would take me to just launch the whole app once</li>
<li>Regression testing - afraid of refactoring ? never again</li>
</ul>


<p>Remember to use Continuous integration if you do testing, be it Jenkins or Xcode bots. I don’t trust developers to always run tests (including myself).</p>

<h3>Refactoring</h3>

<p>I constantly refactor my code, I don’t allocate time for doing it, I just do it every time I see something is not correct.</p>

<p>If your IDE makes it hard to refactor your code, upgrade your IDE. I’ve been using <a href="http://www.jetbrains.com/objc/">AppCode</a> and Xcode with same project opened in parallel for last 3 years.</p>

<h2>Coordinating work with other developers</h2>

<p>When it comes to version control, I prefer git with git-flow approach to branching, git-flow is mature and is becoming industry standard.</p>

<p>I also like to leverage the fact that you can integrate JIRA/Bitbucket/Github together:</p>

<ul>
<li>naming your branches same as tasks in JIRA will make them clickable links</li>
<li>commit messages can close or reference tasks</li>
</ul>


<p>Automating this kind of tasks will improve efficiency and make it much easier to find references if needed, e.g. <em>When you need to reverse a feature, find it in jira and then you get commit hash that created it.</em></p>

<p>I like to have at least 2 developers on every project, even if part-time, as this will avoid situations when a person needs to take vacation or leaves the company and the whole project has to stall or we need to bring in a new developer up to date before we start making progress again.</p>

<p>There is no <em>this is my code</em> or <em>I didn’t write this</em>, team-work and shared codebases, it doesn’t matter who wrote code that has bugs, everyone makes mistakes and it’s the team’s responsibility to fix them.</p>

<p>I prefer to <strong>avoid</strong> assigning particular roles for a developer:</p>

<ul>
<li>e.g. Michael does UI and Matt does the Model</li>
</ul>


<p>I’d like to see Michael leading the harder UI Work with Matt pairing with him and vice versa on model stuff, simpler parts would be split so that each of them can work on both model and UI.</p>

<p>This again will prevent stalling situations but it will also allow developers to learn more from each other, allowing them to grow their expertise and thus increase their value.</p>

<p>I also believe good developers enjoy learning new stuff and they grow impatient and resentful if they can’t, so by allowing them to learn more we will limit rotation (leaving) in company.</p>

<h2>CocoaPods or Submodules ?</h2>

<p>I love <a href="http://cocoapods.org/">CocoaPods</a>, but I sometimes use submodules as well (e.g. Swift code right now doesn’t work with CocoaPods).</p>

<p>Either one will work, whatever you decide, make sure you use them correctly.</p>

<p>If you use CocoaPods, then commit them to repository. If you use submodules then I’d like to have them forked. Why?</p>

<p>Version control is meant to keep working project across the history, if I’ll want to run foldify code 10 years from now I want it to work by just pulling from repo.</p>

<p>If we don’t commit pods this might happen (or have happened before):</p>

<ol>
<li>CocoaPods repository goes down -> can’t work</li>
<li>New OSX version have issue with CocoaPods gem -> can’t work</li>
<li>Someone removes their git project and you can’t install it anymore -> oh, I guess you won’t get much sleep tonight</li>
<li>You got access to a project but not to private cocoapods that the project used? -> can’t work</li>
<li>CI build has a bug that your developers can’t reproduce? -> I guess you were using :head and didn’t commit pods.</li>
</ol>


<p>Similar issues might happen with submodules.
If you commit pods, all of the above will go away.</p>

<h3>Code reviews</h3>

<p>I don’t care if you are ex-apple, twitter, Facebook or any other kind of self-established genius, everyone makes mistakes, myself included.</p>

<p>Code reviews are helpful in finding avoidable bugs before they reach your client.
I like to have peer code reviews, and it has few advantages over  only team leads doing it:</p>

<ul>
<li>Shared knowledge of code base, since usually few developers work on a project I would like to see everyone knowing they way around the code base.</li>
<li>Bottleneck and avoiding quick approvals. There is only limited amount of work one can do, having one or two person responsible for Code Review makes them bottleneck for whole team + people under stress will compromise quality of the review.</li>
</ul>


<p>Keeping branches and code reviews small is crucial, I always give this imaginary example:
- If you give a developer 100 lines of code to review they will find 10 bugs.
- How many bugs will they find in 1000 lines of code? 10</p>

<p>Too much code to read or review is overwhelming for most developers because of limited working memory capacity, keep it small so people can focus.</p>

<p>Big advice when it comes to Code reviews:</p>

<blockquote><p>Don't take it personally if someone critiques code that you wrote, they are critiquing code and not you as a person.</p></blockquote>

<p>I like when people challenge my code because I can learn from their experience and improve it.</p>

<h2>What do I do when I have free time?</h2>

<p>There are high and low times in every project, sometimes we are blocked waiting for someone else to deliver their part , etc.</p>

<p>What I like to do is try during that time is to either (ordered by preference):</p>

<ul>
<li>Find ways to help improve company efficiency, often by creating tools and libraries to help solve common issues:

<ul>
<li><a href="https://github.com/krzysztofzablocki/crafter">https://github.com/krzysztofzablocki/crafter</a></li>
<li><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">https://github.com/krzysztofzablocki/KZPropertyMapper</a></li>
<li><a href="https://github.com/krzysztofzablocki/IconOverlaying">https://github.com/krzysztofzablocki/IconOverlaying</a></li>
</ul>
</li>
<li>Share my experience with other developers and teams, I often speak at public conferences but I also do Lunch &amp; Learn sessions for my employers</li>
<li>Research new technologies that we could use in future projects</li>
</ul>


<h1>Conclusion</h1>

<p>I didn’t use to do some of those things when I was starting out, some of the things I did were exactly the opposite of what I do now, we constantly learn from our own mistakes.</p>

<p>I’d love to hear how does your process and mindset look like, especially if it’s very different from mine!</p>

<p>I'm <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you feel like sharing.</p>
]]></content>
  </entry>
  
</feed>
