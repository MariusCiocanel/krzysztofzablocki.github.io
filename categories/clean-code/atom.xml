<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clean code | Krzysztof Zabłocki]]></title>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/categories/clean-code/atom.xml" rel="self"/>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/"/>
  <updated>2015-05-05T03:51:35+02:00</updated>
  <id>http://krzysztofzablocki.github.com/krzysztofzablocki/</id>
  <author>
    <name><![CDATA[Krzysztof Zabłocki]]></name>
    <email><![CDATA[krzysztof.zablocki@pixle.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing less code]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/08/writing-less-code"/>
    <updated>2014-08-27T17:05:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/08/writing-less-code</id>
    <content type="html"><![CDATA[<p>What are some of my favorite techniques for cleaner and more readable code?</p>

<!-- more -->


<p>Over the years I’ve become very pedantic when it comes to code quality.</p>

<p>All my projects use -Weverything &amp; <em>treat warnings as error</em> and only selectively disable warnings if there is a valid reason to do so.</p>

<p>My code still have bugs every now and then, no way around this, everyone makes mistakes. There are many ways in which one can improve quality and limit bugs, TDD/BDD would be on top of my list.</p>

<p>Having tested code doesn’t neccesary equal clean code.</p>

<p>I value <strong>Readability</strong> keeping code <strong>DRY</strong> much more important. I can work on a project without tests, but working on a code that’s not readable or was written by copy-paste monkey is going to be dreadful experience.</p>

<p>There are many ways in which one can improve Readability and DRY’ness of code:</p>

<ul>
<li><a href="http://www.merowing.info/2014/03/refactoring-tricks/#.U_bvl1jV6cc">smart refactoring</a>.</li>
<li>using <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">self-resolving architecture</a>.</li>
<li>using <a href="http://www.objc.io/issue-13/behaviors.html">behaviours</a>.</li>
<li><a href="https://www.google.com/?q=improving+readability+of+code">many more</a>.</li>
</ul>


<p>I’d like to share few techniques I’ve been using to simplify code.</p>

<blockquote><p>Before we start looking at examples, be aware that pretty much ANY code technique can be misused, that doesn’t mean you should avoid it altogether.</p></blockquote>

<h3><a href="https://github.com/krzysztofzablocki/KZAsserts">KZAsserts</a></h3>

<p>Asserts are great for adhearing to first part of the equation, they’ll crash your app, but they are usually stripped in release(they should), so we need to have proper error handling in release code.</p>

<p>Naive code would look like this:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="n">MyerrorDomain</span> <span class="nl">code:</span><span class="n">FSProfileParsingFailedError</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="nl">NSLocalizedDescriptionKey:</span> <span class="s">&quot;[dataFromServer isKindOfClass:[NSDictionary class]] failed&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="n">MyerrorDomain</span> <span class="nl">code:</span><span class="n">FSProfileParsingFailedError</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="nl">NSLocalizedDescriptionKey:</span> <span class="s">&quot;[something isKindOfClass:[NSString class]] failed&quot;</span><span class="p">}];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>There is a lot of duplication here, that's probably a reason why few people use assertions (I’d rather gauge my eyeballs out than write/read this kind of code).</p>

<p>So how could we achive all of the above (and more), but keep code simple and easy to read?
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AssertTrueOrReturnError</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="n">AssertTrueOrReturnError</span><span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h2>Preprocesor Macros</h2>

<p>Contrary to Apple beliefs (Swift language doc), macros are used for much more than constants (using them for constants is plain wrong).</p>

<h4>What are common techniques for leveraging macros ?</h4>

<p>Given a macro definition:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">Macro</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
and a call like
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Macro</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>We can:</p>

<ol>
<li>Generate NSString - <code>@#param</code> turns into <code>@"name"</code></li>
<li>Generate unique variable definition by joing symbols - <code>NSString *local_##param = #@param;</code> turns into <code>NSString *local_name = @"name";</code></li>
<li>Leverage gcc expression extension for multiple statements with return value - <code>({ result = doSomething(param); result; })</code> can be used as part of other expressions <code>[Macro(name) doSomethingElse]</code></li>
<li>Enforce compile time errors and prevent making spelling mistake when using keyPaths/properties - <code>({if(NO){ [self param]; }; #@param;})</code> can be used as <code>keyPath(name)</code> to get keyPath for a property that you can NEVER make a mistake with (because it will throw compile error if an object doesn’t have property called name).</li>
</ol>


<p>Techniques like this were crucial for my <a href="https://github.com/krzysztofzablocki/KZPropertyMapper">KZPropertyMapper</a> DSL, let’s look at other techniques used there.</p>

<p>Example property mapping might look like this:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'><span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">title</span><span class="p">).</span><span class="n">lengthRange</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'><span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">type</span><span class="p">),</span>
</span><span class='line'><span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">uniqueID</span><span class="p">),</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>This little piece of code does a lot of things:</p>

<ul>
<li>Handle NSNull’s in source data</li>
<li>Gracefully handle optional params</li>
<li>Executes type conversions eg. string to URL</li>
<li>Executes specified validations</li>
<li>Generates compile time error if you make mistake in property name</li>
<li>Looks awesome, just look at those validators, so clear and readable.</li>
</ul>


<p>I’d say that’s quite a lot of bang for a buck. <strong>How can it do it</strong>?</p>

<ol>
<li>Macro’s</li>
<li>Chainable DSL for validators</li>
<li>Key Value Coding</li>
<li>Runtime</li>
</ol>


<p>Macro’s we already discussed, KZBox/KZProperty are macros that use above techniques.</p>

<h2>DSL for validators.</h2>

<p>I bet you appreciate how readable and easy to use validators are. Imagine them written as standard objc method calls, it wouldn’t be as easy to write or read.
Instead of nice
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">startsWith</span><span class="p">(</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Even if I used same smart technqiues for chaining I’d still have lots of <code>[]</code> symbols, likes of:
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="p">[[[</span><span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">)</span> <span class="n">isRequired</span><span class="p">]</span> <span class="nl">min:</span><span class="mi">10</span><span class="p">]</span> <span class="nl">startsWith:</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>This code is not as easy to change, if you wanted to remove or add validation you need to jump between end and start of the definition. Not to mention one can only take so many <code>[]</code>.</p>

<p>We can achieve simple and chainable DSL like the above one by leveraging <em>properties</em> along with <em>blocks</em>:
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">KZPropertyDescriptor</span> <span class="o">*</span><span class="p">(</span><span class="o">^</span><span class="n">length</span><span class="p">)(</span><span class="n">NSInteger</span> <span class="n">length</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>then by calling
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">startsWith</span><span class="p">(</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>What we are actually doing is accessing some block properties and executing them, but how are those block set ?</p>

<p>Very simply:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">KZPropertyDescriptor</span> <span class="o">*</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSUInteger</span> <span class="n">length</span><span class="p">))</span><span class="nf">length</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">number</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">addValidatorWithName:</span><span class="s">@&quot;length&quot;</span> <span class="nl">validation:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>return a block that matches our property definition</li>
<li>when that block is executed we add a new validator with a 1-liner validation block</li>
<li>our block returns self so that we can chain another validator on top of it.</li>
</ol>


<p><a href="https://github.com/krzysztofzablocki/KZPropertyMapper/blob/master/KZPropertyMapper/KZPropertyDescriptor%2BValidators.m">Just take a look at other validators here</a>.</p>

<h2>Key Value Coding</h2>

<p>Key value coding is really cool technique that I use in normal code but also very often while debugging.</p>

<p>KVC allows us to leverage:</p>

<ul>
<li>automatic boxing / unboxing of primitive types (eg. change int into NSNumber and viceversa)</li>
<li>collection operators like <strong>sum/avg/max</strong></li>
<li>more complex operators like <strong>unionOfObjects</strong></li>
<li>extract only interesting attributes</li>
<li><strong>ALL of the above can be applied on subobjects</strong></li>
</ul>


<p>Examples:</p>

<p>Instead of:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">before:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">charts</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="n">CGFLOAT_MIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">HRBBarGraphChartDescriptor</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">chart</span> <span class="k">in</span> <span class="n">charts</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">maxValue</span> <span class="o">=</span> <span class="n">fmaxf</span><span class="p">(</span><span class="n">chart</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">floatValue</span><span class="p">,</span> <span class="n">maxValue</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
We do:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">after:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">charts</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">charts</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;@max.value&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Unique elements from a sub-collection? Instead of:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! We could use set operations here, but it&#39;s just trading speed with memory usage</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSFastEnumeration</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">uniqueElementsBefore</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">allElements</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">ShapeGroup</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">group</span> <span class="k">in</span> <span class="n">_shapeGroups</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span><span class="p">(</span><span class="n">CCSprite</span> <span class="o">*</span><span class="n">element</span> <span class="k">in</span> <span class="n">group</span><span class="p">.</span><span class="n">elements</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">allElements</span> <span class="nl">containsObject:</span> <span class="n">element</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">allElements</span> <span class="nl">addObject:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">allElements</span> <span class="n">copy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Simple:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;-</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">NSFastEnumeration</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;)</span><span class="n">uniqueElementsAfter</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">_shapeGroups</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;@distinctUnionOfArrays.elements&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>When working with debugger I often want to query some collections for interesting properties, eg. I only want names of Users from coredata object.
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">po</span> <span class="p">[[</span><span class="n">website</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;users.name&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>KZPM mostly uses KVC ability to box / unbox properties:
Collection will only contain NSNumbers, but if your class uses NSInteger or other primitives you can get that conversion for free:
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setValue:</span><span class="err">@</span><span class="mi">2</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;primitiveNSInteger&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h2>Runtime</h2>

<p>Meta programming is one of my beloved techniques, I just hate repetition, DRY all the way.</p>

<p>Smart runtime usage can give us a lot of power, I wrote about them extensively before:</p>

<ul>
<li>Dynamically create / override functions and classes:

<ul>
<li>Automatically pick up classes implementing specific protocol. <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">I wrote about this here</a></li>
<li>Intercept methods to log or modify behavior eg. <a href="https://github.com/steipete/Aspects">Aspects</a>.</li>
<li>Implement similar functions without repetition:

<ul>
<li>eg. implementing ActiveRecord style <strong>findByField</strong> would only require a few lines of code for all properties of an object.</li>
</ul>
</li>
<li>Store context data per instance.</li>
<li>Resolve methods/classes dynamically. <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">Read here</a></li>
</ul>
</li>
<li>Adding guards around Apple API's misuses:

<ul>
<li><a href="https://gist.github.com/steipete/5664345">accessing UIKit methods from background threads</a></li>
<li><a href="https://gist.github.com/jverkoey/10641155">accessing CoreData context from wrong thread</a></li>
</ul>
</li>
<li><a href="https://github.com/krzysztofzablocki/CCNode-SFGestureRecognizers">Adding UIGestureRecognizer support to Cocos2D</a></li>
<li>Implement Higher order messaging:
<code>[[windowsArray do] setHidesOnDeactivate:YES];</code></li>
</ul>


<h3>Wrapping up</h3>

<p>There are many techniques to keep your code clean and DRY, I hope you find some of the above useful and if you have other favorites ones <a href="http://twitter.com/merowing_">send me a tweet</a> as I’d love to hear about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring tricks]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/refactoring-tricks"/>
    <updated>2014-03-24T12:17:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/refactoring-tricks</id>
    <content type="html"><![CDATA[<p>I believe in boy scout rule: <em>'Always leave the campground cleaner than you found it.'</em>, that's why I constantly refactor my code so it's clean and tidy.</p>

<p>Readability is one of my main concerns when it comes to programming quality. I'd like to share few less-known refactoring tricks I use to simplify code.</p>

<!-- more -->


<h2>Dictionary mappings</h2>

<p>Let's say you have a switch statement that assigns some value:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">switch</span><span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">value1:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor1&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">value2:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor2&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">value3:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor3&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">value4:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor4&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">value5:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor5&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueForDefault&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Keep in mind this is just switch for 5 values, imagine one for more.
Let's use dictionary mapping to simplify it:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">static</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">mapping</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mapping</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mapping</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>            <span class="err">@</span><span class="p">(</span><span class="n">value1</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor1&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="err">@</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor2&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="err">@</span><span class="p">(</span><span class="n">value3</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor3&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="err">@</span><span class="p">(</span><span class="n">value4</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor4&quot;</span>
</span><span class='line'>            <span class="err">@</span><span class="p">(</span><span class="n">value5</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor5&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">mapping</span><span class="p">[</span><span class="err">@</span><span class="n">value</span><span class="p">]</span> <span class="o">?:</span> <span class="s">@&quot;valueForDefault&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h3>Pro's</h3>

<ul>
<li>Simpler to read, even more so if there are more values in original switch.</li>
<li>Faster, mapping is created only once, then we just do quick lookup of value.</li>
<li>Less prone to errors, since there is no need to do breaks/returns.</li>
<li>Very easy to extract this mapping to some kind of static data like JSON, PLIST file due to nature of the code mapping.</li>
</ul>


<h2>Dynamic Mapping with blocks</h2>

<p>How about more complicated switches, that actually do something dynamic? We can use blocks to simplify the code.</p>

<p>Recently I've had to refactor some code that used stringFormatting for different types:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Scratches&quot;</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfScratches</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Scratch&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Scratches&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfScratches</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Dents&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfDents</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Dent&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Dents&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfDents</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Painted Panels&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfPaintedPanels</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Painted Panel&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Painted Panels&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfPaintedPanels</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Chips&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfChips</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Chip&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Chips&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfChips</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Tires&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfTires</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Tire&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Tires&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfTires</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="n">title</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>By using block mapping we can refactor it into something like this:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSDictionary</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">titleMapping</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">titleMapping</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="o">^</span><span class="k">const</span> <span class="n">format</span><span class="p">)(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">value</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">singular</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">plural</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d %@&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">singular</span> <span class="o">:</span> <span class="n">plural</span><span class="p">)];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">titleMapping</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">@&quot;Scratches&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfScratches</span><span class="p">],</span> <span class="s">@&quot;Scratch&quot;</span><span class="p">,</span> <span class="s">@&quot;Scratches&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s">@&quot;Dents&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfDents</span><span class="p">],</span> <span class="s">@&quot;Dent&quot;</span><span class="p">,</span> <span class="s">@&quot;Dents&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s">@&quot;Painted Panels&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfPaintedPanels</span><span class="p">],</span> <span class="s">@&quot;Painted Panel&quot;</span><span class="p">,</span> <span class="s">@&quot;Painted Panels&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s">@&quot;Chips&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfChips</span><span class="p">],</span> <span class="s">@&quot;Chip&quot;</span><span class="p">,</span> <span class="s">@&quot;Chips&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s">@&quot;Tires&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfTires</span><span class="p">],</span> <span class="s">@&quot;Tire&quot;</span><span class="p">,</span> <span class="s">@&quot;Tires&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="o">^</span><span class="n">getTitle</span><span class="p">)(</span><span class="n">MyClass</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">target</span><span class="p">)</span> <span class="o">=</span> <span class="n">titleMapping</span><span class="p">[</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">getTitle</span> <span class="o">?</span> <span class="n">getTitle</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h3>Pro's</h3>

<ul>
<li>Safer since there is no way of screwing up if-else chain</li>
<li>Cached mapping since we use static variable</li>
<li>We could easily add a macro to make it even smaller code foot-print and thus easier to expand</li>
</ul>


<p>PS. I could've used string matching to implement it with even less code but I didn't think it will make it more readable.</p>

<h2>Simpler flow by using early returns and reversing if's</h2>

<p>As you probably figured out by now I don't like too many if's and I <strong>hate</strong> long if-else chains. Instead I prefer to keep if statements as simple as possible and use early returns.</p>

<p>Instead of:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! success code</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! failure code</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>I'd probably write:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! failure code</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//! success code</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h3>Pro's</h3>

<ul>
<li>I don't need to read further code if I'm only interested in error case.</li>
<li>In longer code I don't need to remember all the flow since I can clearly see early returns/break</li>
</ul>


<h2>Using dynamic method resolution</h2>

<p>Sometimes we might see code similar to this:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;videoWidget&quot;</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">parseVideoWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;imageWidget&quot;</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">parseImageWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;textWidget&quot;</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">parseTextWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;twitterWidget&quot;</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">parseTwitterWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>First of all: I could apply all of the above refactorings to this, but this code looks like it's prime canditate for future expansion, let's see how we can make it even nicer.</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">SEL</span> <span class="n">dynamicSelector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;parse%@:&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">]);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">dynamicSelector</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DDLogWarning</span><span class="p">(</span><span class="s">@&quot;Unsupported widget type %@&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="n">dynamicSelector</span> <span class="nl">withObject:</span><span class="n">dictionary</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h3>Pro's</h3>

<ul>
<li>Very easy to read and understand</li>
<li>Safer than if statements</li>
<li>Easy to expand, I can add new widgets types in categories, eg. when doing a spin-off app I don't even need to touch the base class</li>
</ul>


<h2>Conclusion</h2>

<p>I constantly refactor my code, this are just few tricks that are less-known but can be helpful to make your code simpler. I usually write my code in <a href="http://www.jetbrains.com/objc/">AppCode</a> which is a great IDE that has lots of refactoring functions that I use every-day, check it out.</p>

<p>If you have other refactoring tricks that you use often <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 Most common code issues]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/7-most-common-code-issues"/>
    <updated>2014-03-20T18:34:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/7-most-common-code-issues</id>
    <content type="html"><![CDATA[<p>I do lots of code reviews, what are top 7 most common issues I find?</p>

<!-- more -->


<h1>Commented out code</h1>

<p>It makes me think that you didn't learn how to use version control and tagging, why the hell do I need to read that old code, if it's no longer valid!?</p>

<p>If it's important and you might need to get back to it in the future tag it properly, then remove from current code.</p>

<h1>Useless comments</h1>

<p>Comments that don't bring any value, they are obvious or they mark part of code that should be put in a method.</p>

<p><strong>Remember</strong>: comments get outdated very quickly and people don't maintain them.</p>

<h1>Empty methods</h1>

<p>A method only calling super is considered empty. Remove it.</p>

<h1>Files are too long</h1>

<p>How can you keep reading file that has over 400 lines of code? It makes my eyes bleed, please use composition, categories or other ways of organising your code.</p>

<p>When I see a file that has so many lines I assume it's breaking SRP unless proven otherwise.</p>

<h1>Immutable object properties with wrong qualifiers</h1>

<p>If you have immutable object property that has mutable counterpart, always use copy. Otherwise you can end up having nasty bugs, if someone assigns you mutable counterpart and modified it.</p>

<p><strong>Remember</strong>: if you call copy on immutable object like NSString, it will really only call retain, 0 performance hit.</p>

<h1>Not caring about results</h1>

<p>If you call my API without passing errorHandler, I'm gonna make you pay dearly(crash). Same goes for completion results.</p>

<p><strong>Remember</strong>: When you create API don't allow people to call expensive methods without them caring about results, your users will appreciate longer battery life.</p>

<h1>No assertions or validation</h1>

<p>Assert your assumptions, use asserts to enforce proper API usage or to make sure your assumptions are actually valid. If they are not, you'll get to know about that quickly.</p>

<p>If you have other that you find often <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
</feed>
