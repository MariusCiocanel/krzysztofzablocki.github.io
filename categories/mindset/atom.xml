<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mindset | Krzysztof Zabłocki]]></title>
  <link href="http://merowing.info/categories/mindset/atom.xml" rel="self"/>
  <link href="http://merowing.info/"/>
  <updated>2015-05-29T16:18:44+02:00</updated>
  <id>http://merowing.info/</id>
  <author>
    <name><![CDATA[Krzysztof Zabłocki]]></name>
    <email><![CDATA[krzysztof.zablocki@pixle.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How do I work?]]></title>
    <link href="http://merowing.info/2014/10/how-do-i-work"/>
    <updated>2014-10-06T15:21:00+02:00</updated>
    <id>http://merowing.info/2014/10/how-do-i-work</id>
    <content type="html"><![CDATA[<p>I’ve been programming for 18 years now, doing commercial work for the last 6, over the years I’ve been exposed to different ideas and experiences that have constantly affect the way I write code, what matters and how I go about working for my clients. I’d like to share some insights in what is my current approach to few common topics.</p>

<!-- more -->


<p>Over last 3 years I’ve been mostly tasked with hands-on leadership roles, my goals were to deliver project on time and with good quality.</p>

<h2>Mindset - Put yourself in your clients shoes</h2>

<p>Whenever working on a project I like to think about it as my own project, I try to understand not only technical aspects of the project but also its business goals.</p>

<p>Care deeply and it's easier to deliver quality work, avoiding shortcuts and making sure the client will succeed, and if they succeed then they’ll probably come back to you. It’s a win-win.</p>

<h2>Establishing consistency when joining new teams</h2>

<p>Whenever I join new team, I like to know if there are any established convention for code style, quality and similar.</p>

<p>If there aren’t, I share my guidelines and process description and ask the rest of the team to read it and then have a discussion if they agree with it or we should adjust some things.</p>

<p>One has to remember that code style is subjective and there usually isn’t a right or wrong answer, what matters, though, is consistency.</p>

<p>I’ve no problem using someone else's code style but I wouldn’t want to work on a project that has inconsistent style / approach to coding as this is a sign of low quality.</p>

<p>It’s important to learn your team-members strong and weak sides and get to know them as people, not just developers.</p>

<h2>Code Quality</h2>

<p>Quality is something I’m not really willing to negotiate on, I want the projects I work on to at least have:</p>

<ul>
<li>-Weverything - enable all warnings as default, disable  some selectively</li>
<li>Treat warnings as errors - there are proper reasons warnings exist</li>
<li>Add Guards for UIKit/CoreData + threading</li>
<li>Scripts that will raise developer attention for TODO/s and code smells</li>
</ul>


<p>I would also prefer to have BDD tests in the project. I prefer BDD over TDD as it’s more focused on what matters for the client, I will use TDD when working on a library or some reusable part of the app but keep BDD for more general code.</p>

<p>Many people think tests make you slower, but even if we put long-term effects of quality aside (tests are definitely worth it in long run) you can also see that tests can actually allow you to iterate quickly:</p>

<ul>
<li>If you are blocked by lack of API endpoints you can mock your data and still implement your part of the logic</li>
<li>Executing tests is usually much faster than running whole app and navigating to specific feature, I can adjust and run few iterations of tests in the time it would take me to just launch the whole app once</li>
<li>Regression testing - afraid of refactoring ? never again</li>
</ul>


<p>Remember to use Continuous integration if you do testing, be it Jenkins or Xcode bots. I don’t trust developers to always run tests (including myself).</p>

<h3>Refactoring</h3>

<p>I constantly refactor my code, I don’t allocate time for doing it, I just do it every time I see something is not correct.</p>

<p>If your IDE makes it hard to refactor your code, upgrade your IDE. I’ve been using <a href="http://www.jetbrains.com/objc/">AppCode</a> and Xcode with same project opened in parallel for last 3 years.</p>

<h2>Coordinating work with other developers</h2>

<p>When it comes to version control, I prefer git with git-flow approach to branching, git-flow is mature and is becoming industry standard.</p>

<p>I also like to leverage the fact that you can integrate JIRA/Bitbucket/Github together:</p>

<ul>
<li>naming your branches same as tasks in JIRA will make them clickable links</li>
<li>commit messages can close or reference tasks</li>
</ul>


<p>Automating this kind of tasks will improve efficiency and make it much easier to find references if needed, e.g. <em>When you need to reverse a feature, find it in jira and then you get commit hash that created it.</em></p>

<p>I like to have at least 2 developers on every project, even if part-time, as this will avoid situations when a person needs to take vacation or leaves the company and the whole project has to stall or we need to bring in a new developer up to date before we start making progress again.</p>

<p>There is no <em>this is my code</em> or <em>I didn’t write this</em>, team-work and shared codebases, it doesn’t matter who wrote code that has bugs, everyone makes mistakes and it’s the team’s responsibility to fix them.</p>

<p>I prefer to <strong>avoid</strong> assigning particular roles for a developer:</p>

<ul>
<li>e.g. Michael does UI and Matt does the Model</li>
</ul>


<p>I’d like to see Michael leading the harder UI Work with Matt pairing with him and vice versa on model stuff, simpler parts would be split so that each of them can work on both model and UI.</p>

<p>This again will prevent stalling situations but it will also allow developers to learn more from each other, allowing them to grow their expertise and thus increase their value.</p>

<p>I also believe good developers enjoy learning new stuff and they grow impatient and resentful if they can’t, so by allowing them to learn more we will limit rotation (leaving) in company.</p>

<h2>CocoaPods or Submodules ?</h2>

<p>I love <a href="http://cocoapods.org/">CocoaPods</a>, but I sometimes use submodules as well (e.g. Swift code right now doesn’t work with CocoaPods).</p>

<p>Either one will work, whatever you decide, make sure you use them correctly.</p>

<p>If you use CocoaPods, then commit them to repository. If you use submodules then I’d like to have them forked. Why?</p>

<p>Version control is meant to keep working project across the history, if I’ll want to run foldify code 10 years from now I want it to work by just pulling from repo.</p>

<p>If we don’t commit pods this might happen (or have happened before):</p>

<ol>
<li>CocoaPods repository goes down -> can’t work</li>
<li>New OSX version have issue with CocoaPods gem -> can’t work</li>
<li>Someone removes their git project and you can’t install it anymore -> oh, I guess you won’t get much sleep tonight</li>
<li>You got access to a project but not to private cocoapods that the project used? -> can’t work</li>
<li>CI build has a bug that your developers can’t reproduce? -> I guess you were using :head and didn’t commit pods.</li>
</ol>


<p>Similar issues might happen with submodules.
If you commit pods, all of the above will go away.</p>

<h3>Code reviews</h3>

<p>I don’t care if you are ex-apple, twitter, Facebook or any other kind of self-established genius, everyone makes mistakes, myself included.</p>

<p>Code reviews are helpful in finding avoidable bugs before they reach your client.
I like to have peer code reviews, and it has few advantages over  only team leads doing it:</p>

<ul>
<li>Shared knowledge of code base, since usually few developers work on a project I would like to see everyone knowing they way around the code base.</li>
<li>Bottleneck and avoiding quick approvals. There is only limited amount of work one can do, having one or two person responsible for Code Review makes them bottleneck for whole team + people under stress will compromise quality of the review.</li>
</ul>


<p>Keeping branches and code reviews small is crucial, I always give this imaginary example:
- If you give a developer 100 lines of code to review they will find 10 bugs.
- How many bugs will they find in 1000 lines of code? 10</p>

<p>Too much code to read or review is overwhelming for most developers because of limited working memory capacity, keep it small so people can focus.</p>

<p>Big advice when it comes to Code reviews:</p>

<blockquote><p>Don't take it personally if someone critiques code that you wrote, they are critiquing code and not you as a person.</p></blockquote>

<p>I like when people challenge my code because I can learn from their experience and improve it.</p>

<h2>What do I do when I have free time?</h2>

<p>There are high and low times in every project, sometimes we are blocked waiting for someone else to deliver their part , etc.</p>

<p>What I like to do is try during that time is to either (ordered by preference):</p>

<ul>
<li>Find ways to help improve company efficiency, often by creating tools and libraries to help solve common issues:

<ul>
<li><a href="https://github.com/krzysztofzablocki/crafter">https://github.com/krzysztofzablocki/crafter</a></li>
<li><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">https://github.com/krzysztofzablocki/KZPropertyMapper</a></li>
<li><a href="https://github.com/krzysztofzablocki/IconOverlaying">https://github.com/krzysztofzablocki/IconOverlaying</a></li>
</ul>
</li>
<li>Share my experience with other developers and teams, I often speak at public conferences but I also do Lunch &amp; Learn sessions for my employers</li>
<li>Research new technologies that we could use in future projects</li>
</ul>


<h1>Conclusion</h1>

<p>I didn’t use to do some of those things when I was starting out, some of the things I did were exactly the opposite of what I do now, we constantly learn from our own mistakes.</p>

<p>I’d love to hear how does your process and mindset look like, especially if it’s very different from mine!</p>

<p>I'm <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you feel like sharing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmers bad habits]]></title>
    <link href="http://merowing.info/2012/05/programmers-bad-habits"/>
    <updated>2012-05-29T21:26:00+02:00</updated>
    <id>http://merowing.info/2012/05/programmers-bad-habits</id>
    <content type="html"><![CDATA[<p><a href="http://www.merowing.info/uploads/2012/05/reuse.jpg"><img src="http://www.merowing.info/uploads/2012/05/reuse.jpg" alt="" /></a></p>

<p>We evolve and change our habits, probably many times every few years. Your code style changes, your approach to writing code in general.<br/>
That’s usually good but sometimes bad habits are introduced into that process and remain with you for long time.  I would like to share my short thought of a few ‘not really that good’ habits that I’ve seen in myself and other people over the years. Some may be not look like bad ones…</p>

<!-- more -->


<h2>Disclaimer</h2>

<p>The wrong habits I’m going to mention are all about extreme cases, so take it with a grain of salt. Remember that each project should have a well thought architecture and what works better for some might be hell for others. I’m all about doing OOP and SRP but as everything it can be abused, remember about KISS principle guys ?.</p>

<h2>Leaving unused code</h2>

<p>We all sometimes decide to rewrite some part of code because it either doesn’t work or we want to improve it a bit, a lot of us are perfectionist after all. You start by commenting current version and write new code in it place. That’s all fine but you should remove it after you are done with new version. If you don’t it will keep growing, and at some point it’s start to really obscure the important and working things.</p>

<p>eg. I got a request from one of my contracting clients, and he asked me to implement some new features into his codebase. So I downloaded the code and I saw more commented out code that actually working one. <strong>It really obscures things and make it less readable.</strong></p>

<p>Other common problem is leaving unused functions in your app, they used to be needed before but now the project has evolved and they are <strong>never called,</strong> try getting someone new on the project and <strong>I guarantee that he will waste time reading them</strong>.</p>

<p><strong>You have version control for keeping old code, don’t be afraid to delete it! Do it now!</strong></p>

<h2>Over-generalization</h2>

<p>Many programmers are taught to write code that can handle anything you throw at it at some point, and they begin to think that way in every application they do. I’ve created a lot of components / frameworks and did my own 3D Game engine so I know quite a lot about doing abstract code. But for 90% of apps that should not be the case.</p>

<p>We as programmers tend to think that we will reuse our code later on, so we try to make it as general / abstract as we can think of. You are doing custom component? How about you make sure it handles 10 use cases even if we only need 2 in our current app ?</p>

<p><strong>I’ve bad news for you, you barely reuse your older code in other projects. </strong>You are wasting your time or your client time (which he is paying for) doing stuff that’s not needed in the project, instead of focusing on the parts that are important. If you have to write second (or better third) project that uses similar custom class, then I would think about exposing it as separate entity. <strong>You already know a few use cases that are usually needed, you have experienced and fixed some pitfalls, it’s tested in real projects.</strong></p>

<h2>Object Oriented fixation</h2>

<p>Let me state this: I’m big fan of Object oriented programming and single responsibility principle, <strong>I love that approach</strong> as it’s easy to understand, easy to maintain.</p>

<p><strong>But some people tend to go overboard</strong> with making everything separate classes ( this is similar to previous point about over-generalization ). Project’s shouldn’t blow out of proportions with as many classes as you can think of. Once you start doing<strong> classes that have only one simple function, you should stop and think if that’s really necessary ?  ( I’m not talking about SRP (SRP is good!), but rather making 5 classes that have same responsibility and could easily be 1 class )</strong></p>

<p>Too much generalization, putting everything in separate classes ( when non necessary ) may have a bad repercussions later on. It will be harder to optimize your code if it’s going between too many classes ( SRP is your friend ), it may actually be hard to add new features when you divide the code too much… <strong>Always think about the relations between your classes and their responsibilities, do you really need to move that code into separate class? Maybe it’s doesn’t really make sense?</strong></p>

<h2>I can write that better</h2>

<p>Many of us have have big egos, we think we can write anything and probably do it better than someone else. <strong>Leave your ego at home</strong>.</p>

<p>This applies to almost everything we do, when we need to work on a project that was already created by someone else we tend to look at it briefly and then we think ‘<strong>that’s really bad code, I could rewrite it wayyyy better</strong>‘. When you need to add some custom component to your project, you can look at it and decide ‘<strong>I could make it nicer if I wrote it from scratch</strong>‘.</p>

<p><strong>I’ve bad news for you: </strong>Almost all code may look like crap to someone else, we all have different approaches / experiences. The programmer that made this project probably spend months of time doing the structure work and he really understood what need to be taken care of, you just looked at the project and you can’t potentially know that. Of course there are many cases where the code is really crap, but it’s obvious when you see something like that (taken from a real project that I was asked to improve by client, ivars name changed ):</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">A</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">B</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">A</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">B</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'>   <span class="n">A</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>   <span class="n">B</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>   <span class="p">[</span><span class="n">self</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>   <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>As for writing your own components, you can find quite a lot of good quality components for what you are trying to achieve, and it always better to use something that is already tested by the community, rather than making if from scratch.</p>

<p>Just think how much time it would take to write it, then make sure it all works correctly, and then <strong>figure out that you didn’t test good enough</strong>. Writing from scratch is mostly beneficial for learning, not for a project that you have to deliver in next 2 weeks ![:)][2]</p>

<p><strong>And if you don’t believe that you can write bad code, just open some project you did a few years ago, I bet you will think that’s it BAD! </strong></p>

<h2>Afraid of tools and writing less code</h2>

<p>People tend to be afraid of change, we have our habits that we believe are the right ones, it takes some force to go out of your comfort zone and really give a try to something new.</p>

<p>A lot of programmers that I’ve met think that using Interface Builder is really bad, I’ve been writing my UI code manually for 2 years after initially trying IB and not liking the first versions of that , after this period I went outside my comfort zone and gave IB a second try. It improved a lot, now you even have Storyboard that are really nice and will probably evolve to more and more useful tool. I find it really useful to use IB in some cases, and it’s not only for very simple UI, you can make many advanced stuff also in IB.</p>

<p><strong>Be pragmatic and use the best tool for the job, sometimes it’s better to write your custom UI code ( like custom UITableViewCell that needs to render fast! ) but very often IB is absolutely fine!</strong></p>

<p>After all<strong> Less code you write means less problems that you will have to debug.</strong></p>

<h2>Conclusion</h2>

<p>There are many more bad habits that you probably are aware of ( could probably write a book about them ). The one that I mentioned may not be the obvious ones, but I’ve noticed them quite often working with different people. If someone does any of them I doesn’t mean they are bad programmers, probably all of us have some bad habits and the point is to try to eliminate. <strong>I dare you to look at code that you wrote 3 years ago and tell me that you like it now ![:)][2]</strong></p>

<p>I'm <a href="http://www.twitter.com/merowing_">merowing_ on twitter</a> if you feel like talking about it.</p>
]]></content>
  </entry>
  
</feed>
