<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | Krzysztof Zabłocki]]></title>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/categories/open-source/atom.xml" rel="self"/>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/"/>
  <updated>2015-05-05T03:08:41+02:00</updated>
  <id>http://krzysztofzablocki.github.com/krzysztofzablocki/</id>
  <author>
    <name><![CDATA[Krzysztof Zabłocki]]></name>
    <email><![CDATA[krzysztof.zablocki@pixle.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop writing data parsing code in your Apps.]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/stop-writing-data-parsing-code-in-your-apps"/>
    <updated>2013-07-25T06:16:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/stop-writing-data-parsing-code-in-your-apps</id>
    <content type="html"><![CDATA[<p>Data parsing is one of most common tasks we need to do in our apps, yet still majority of people do this parsing by hand, always repeating the same code for each class they need to map.</p>

<p>Usual parsing requires this steps:</p>

<ul>
<li>make sure you translate NSNull to nil and not crash</li>
<li>gracefully handle optional params</li>
<li>do type conversions</li>
</ul>


<p>I'll show show you how you could simplify your code, with very lightweight pattern (0 Dependendencies).
<a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Or just jump straight to github repo</a></p>

<!-- more -->


<h2>Why Property Mapper?</h2>

<p>There are libraries helping with that like Mantle, RESTKit and many more… But I wanted something that's self contained, easy to change / remove and requires minimal amount of code.</p>

<p>I've created <strong>Property Mapper</strong> as part of working on <a href="http://foldifyapp.com">Foldify</a>, a simple self contained class that allows you to specify mapping between data you receive and data representation you have in your application. With some additional features.</p>

<p>I don't like passing around JSON so I write parsing on top of native objects like NSDictionary/NSArray.
If you get data as JSON just write a simple category that transforms JSON to native objects using NSJSONSerialization.</p>

<h2>Example usage</h2>

<p>Let's assume you have object like this:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">KZPropertyTestObject</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">contentURL</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">videoURL</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSNumber</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">uniqueID</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>and you receive data from server in this format:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="s">@&quot;http://test.com/video.mp4&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="s">@&quot;Some Cool Video&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">],</span>
</span><span class='line'><span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">616</span><span class="p">,</span>
</span><span class='line'>        <span class="s">@&quot;arbitraryData&quot;</span> <span class="o">:</span> <span class="s">@&quot;data&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>this is the code you would write in your parsing code:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>   <span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="s">@&quot;@URL(contentURL)&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="s">@&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="s">@&quot;type&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>     <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="s">@&quot;uniqueID&quot;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
Quite obvious what it does but in case you are confused, it will translate videoURL string to contentURL NSURL object, it will also grab title from sub_object and assign it to uniqueID. It also handles NSNull.</p>

<h2>Advanced usage</h2>

<p>Let's now change our mind and decide that we want our type property to be typedef enumeration, it's quite easy with KZPropertyMapper, change type mapping to following and add following method:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="s">@&quot;@Selector(videoTypeFromString:, type)&quot;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//! implemented on instance you are parsing</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nl">videoTypeFromString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;shortVideo&quot;</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">VideoTypeShort</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">VideoTypeLong</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
Done. Same approach will work for sub-object instances or anything that you can assign to property.</p>

<h3>Referencing arrays items</h3>

<p>If your data comes to you in ordered array instead of dictionaries you can reference that as well:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">sourceData</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;sub_object_array&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;test&quot;</span><span class="p">,</span> <span class="err">@</span><span class="mi">123</span><span class="p">]}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;sub_object_array&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span><span class="err">@</span><span class="mi">1</span> <span class="o">:</span> <span class="s">@&quot;uniqueID&quot;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
This will grab first item from sub_object_array and assign it to uniqueID. It also works recursively.</p>

<h3>Expanding boxing capabilities</h3>

<p>You can expand boxing capabilities across whole application easily, just add category on KZPropertyMapper that implements methods like this:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">boxValueAsType:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! your boxing</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div>
Now you can use @Type mapping everywhere in your code.</p>

<h1>Final note</h1>

<p>Unit tests should serve as documentation. Default boxing types include @URL and @Date.
CocoaPods spec will follow shortly. For now you can just add KZPropertyMapper.h / m to your project, ARC only.</p>

<p><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Github repo</a></p>

<p><a href="http://twitter.com/merowing_">Follow me on twitter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanded use of Asserts]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/expanded-use-of-asserts"/>
    <updated>2013-07-03T19:23:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/expanded-use-of-asserts</id>
    <content type="html"><![CDATA[<p>Do you use assertions in your code? What for? How do you handle release builds ?</p>

<p>I'll share my current take on those questions and some interesting code snippet.</p>

<!-- more -->


<h3>Assertions, when should I use them ?</h3>

<h2>Update</h2>

<p><a href="https://github.com/krzysztofzablocki/KZAsserts">New version of assert macros and more reasoning behind it is available here</a></p>

<p>Assertions are one of the oldest ways of making sure that code works the way we think it does.</p>

<p>Which means we should be adding assertions on all assumptions we make.</p>

<p>I believe we should also use Assertions as contracts when designing our API's, e.g. I don't believe any expensive operation should happen if you don't care about results (completionBlock being only way to get results here), so I'll make sure that developer using my API cares.</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">expensiveOperationWithCompletion:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="kt">id</span><span class="p">))</span><span class="nv">completion</span> <span class="p">{</span>
</span><span class='line'><span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">completion</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Most people would only use assertions when checking our own assumptions, but I'm big fan of <em>"Crash Early, Crash Often"</em> and so I tend to write more asserts than most people, one place when I add extra assertions is integration points, especially with data coming from server.</p>

<p>E.g. I'm expecting to get Dictionary inside Array not the other way around. If I crash I'll know straight away that backend developer has changed something and didn't notify me.</p>

<h3>How should I handle user-facing release builds?</h3>

<p>User should never see crash if possible, the only crash I can accept is when there is unavoidable data corruption if we don't crash, which is pretty much always avoidable, especially with my approach.</p>

<p>So how people handle release builds ? They are <em>2 camps here</em>, some people strip asserts on release builds (<em>Apple</em> does that by default in Xcode), some people think you should have them on release as well (<a href="http://www.mikeash.com/pyblog/friday-qa-2013-05-03-proper-use-of-asserts.html"><em>mikeash</em> does that</a>).</p>

<p>I think you should strip assertions on release builds, but I also think just striping them is wrong, especially with the extended way I'm using them. What if you assert when working with data coming from server and server changes ?</p>

<p>It's gonna crash because some of your code expected something else, this is <strong>very bad UIX</strong>.</p>

<h3>How you could handle Assert on server integration parts?</h3>

<p>One could advocate that you might solve this problem like this:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! release code</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>By striping asserts in release you'd get just the if happening. I think code like this is <em>hard to maintain</em>, leads to a lot of repetitions, I also belive you should also be generating some errors in that if statement or you won't know that something is wrong in release build.</p>

<p>Now imagine that most integration code would require multiple asserts (easily 5+), that's a lot of code that you <strong>don't want to write</strong>.</p>

<h3>How I want assertions to work ?</h3>

<p>My preferred assertions should work as follows:</p>

<ul>
<li>Crash on debug, crash early crash often. I want to know if there is any problem with my code.</li>
<li>Never crash on release, don't break code flow if something unexpected happens, even on asynchronous code.</li>
<li>Generate and log error automatically when using release builds.</li>
<li>Write as little code as possible.</li>
</ul>


<p>For those reasons <strong>I've implemented my own macros for Assertions</strong>,  that's how the simplest one looks like:
<div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">AssertTrueOrReturn</span><span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="err">\</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NSAssert</span><span class="p">((</span><span class="n">condition</span><span class="p">),</span> <span class="s">@&quot;Invalid condition not satisfying: %s&quot;</span><span class="p">,</span> <span class="err">#</span><span class="n">condition</span><span class="p">);</span><span class="err">\</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">condition</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pixle_NSErrorMake</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Unexpected behaviour not satisfying: %s&quot;</span><span class="p">,</span> <span class="err">#</span><span class="n">condition</span><span class="p">],</span> <span class="n">kErrorCodeInternal</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>\
</span><span class='line'><span class="p">}</span> <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Let me explain how it works:</p>

<ul>
<li>do {} while(0) is a common C trick to get compiler to accept <strong>;</strong> at the end of macro without complaining.</li>
<li>we use NSAssert as our base assertions, works in debug, stripped in release.</li>
<li>if statement executes only on release (debug already crashed).</li>
<li>if release build has unexpected behaviour, it will generate error automatically from failed condition.</li>
<li>pixle_NSErrorMake is just helper method for error creation, which also logs that error.</li>
<li>code will return after logging that error.</li>
</ul>


<p>But that's the simplest assertion macro I've implemented, one that's way more interesting to use is this one, shown here as usage example:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">(</span><span class="n">userInfo</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">completionBlock</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>This macro will assert code, call block with automatically generated error and then return from code scope. Which makes it work with async code.</p>

<p>Whole set of asserts are as follows:</p>

<ul>
<li>AssertTrueOrReturn &lt;- assert + return;</li>
<li>AssertTrueOrReturnNil &lt;- assert + return nil;</li>
<li>AssertTrueOrReturnBlock &lt;- assert + execute block + return;</li>
<li>AssertTrueOrReturnNilBlock &lt;- assert + execute block + return nil;</li>
<li>AssertTrueOrReturnError &lt;- assert + execute block + return error;</li>
</ul>


<p>You can see how to implement all of this macros <a href="https://gist.github.com/krzysztofzablocki/5921645">under this gist</a></p>

<p>I'm <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you want to chat about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pinch to reveal animation like in boeing milestones]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2012/07/pinch-to-reveal-animation-like-in-boeing-milestones"/>
    <updated>2012-07-01T21:19:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2012/07/pinch-to-reveal-animation-like-in-boeing-milestones</id>
    <content type="html"><![CDATA[<p><a href="http://itunes.apple.com/us/app/boeing-milestones/id510294916?mt=8">Boeing made a nice app for iPad</a></p>

<p>I was shown this app and asked if it’s hard to do this pinch to reveal animation.
It’s actually quite easy to do with CoreAnimation.</p>

<!-- more -->


<h2>Analyzing</h2>

<p>Let’s take a look at how Boeing app works when you pinch on screen:</p>

<ul>
<li>User pinches screen on the area he’s interested in</li>
<li>The screen is divided into 2 parts and each part boundary is following user finger</li>
<li>Specific content is visible under the moving parts</li>
</ul>


<p>What <strong>I don’t like</strong> about this app is the <strong>lag</strong> when user starts pinching, my guess is that the app is taking screenshot and creating the separate graphics for both parts of the screen ( That was idea I have heard when first taking look at the app ). I believe that’s unnecessary and it’s quite slow. We can use simple layer masking instead…</p>

<h2>Implementation</h2>

<p>Let’s create 2 ImageViews with our front content and use pinch gesture recognizer for interaction:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Background2.jpeg&quot;</span><span class="p">]]];</span>
</span><span class='line'>  <span class="n">UIImage</span> <span class="o">*</span><span class="n">frontImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Background.jpeg&quot;</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">leftView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">frontImage</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">leftView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">rightView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">frontImage</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">rightView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">UIPinchGestureRecognizer</span> <span class="o">*</span><span class="n">pinchGestureRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIPinchGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handlePinchGesture:</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">pinchGestureRecognizer</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Next we need to mask our left and right image views properly depending on division point on screen:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">divideBackgroundAtPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">divisionX</span> <span class="o">=</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//1</span>
</span><span class='line'>  <span class="n">CALayer</span> <span class="o">*</span><span class="n">leftMask</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>  <span class="n">leftMask</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">leftMask</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">divisionX</span><span class="p">,</span> <span class="n">leftView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">leftView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">leftMask</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//2</span>
</span><span class='line'>  <span class="n">CALayer</span> <span class="o">*</span><span class="n">rightMask</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>  <span class="n">rightMask</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rightMask</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">divisionX</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">rightView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">divisionX</span><span class="p">,</span> <span class="n">rightView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rightView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">rightMask</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Creating mask is as simple as adding new layer with black color and setting proper frame on it. Then just assigning it as layer.mask on selected view.</p>

<ol>
<li>Left part of the view will be masked from the start of image to the division point.</li>
<li>Right part of the view will be masked from the division point to the end of the image.</li>
</ol>


<p>We need to adjust this division each time user starts pinch gesture, so let’s take a look at handlePinchGesture function:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handlePinchGesture:</span><span class="p">(</span><span class="n">UIPinchGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">pinchGestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//1</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">divideBackgroundAtPoint:</span><span class="p">[</span><span class="n">pinchGestureRecognizer</span> <span class="nl">locationInView:</span><span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">view</span><span class="p">]];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//2</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">pinchGestureRecognizer</span> <span class="n">numberOfTouches</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">float</span> <span class="n">leftPoint</span> <span class="o">=</span> <span class="p">[</span><span class="n">pinchGestureRecognizer</span> <span class="nl">locationOfTouch:</span><span class="mi">0</span> <span class="nl">inView:</span><span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">view</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">rightPoint</span> <span class="o">=</span> <span class="p">[</span><span class="n">pinchGestureRecognizer</span> <span class="nl">locationOfTouch:</span><span class="mi">1</span> <span class="nl">inView:</span><span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">view</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">leftPoint</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">rightPoint</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">rightPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rightPoint</span> <span class="o">=</span> <span class="n">leftPoint</span><span class="p">;</span>
</span><span class='line'>  <span class="n">leftPoint</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mf">0.3f</span> <span class="nl">delay:</span><span class="mi">0</span> <span class="nl">options:</span><span class="n">UIViewAnimationCurveEaseInOut</span> <span class="nl">animations:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">leftView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">MIN</span><span class="p">(</span><span class="n">leftPoint</span> <span class="o">-</span> <span class="n">divisionX</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">leftView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">leftView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">leftView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rightView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">MAX</span><span class="p">(</span><span class="n">rightPoint</span> <span class="o">-</span> <span class="n">divisionX</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">rightView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">rightView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">rightView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>                <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//3</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateEnded</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">const</span> <span class="n">CGFloat</span> <span class="n">velocity</span> <span class="o">=</span> <span class="n">pinchGestureRecognizer</span><span class="p">.</span><span class="n">velocity</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">velocity</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">animateToClosePosition</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">animateToOpenPosition</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>If user just started pinching, we adjust our division masks.</li>
<li>If pinch gesture uses 2 fingers, we animate our views positions to match both finger positions, we limit the movement so that user is not allowed to move views away from screen boundary.</li>
<li>If user finishes pinching gesture, we either animate to fully open position or we animate to closed one.</li>
</ol>


<p>Result:<br/>
 <video width='640' height='360' preload='none' controls poster=''><source src='http://www.merowing.info/uploads/2012/07/Boening-proof-of-concept.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h2>Conclusion</h2>

<p><a href="https://github.com/krzysztofzablocki/Pinch-to-reveal">Grab copy from GitHub.</a></p>

<p>It was quite simple to reproduce this pinch to reveal effect. About 40 min from seeing the original one to implementing my own implementation. For fun try adding shadow layers underneath the images, this should allow you to get nice darkening effect when left and right part are close to each other.</p>

<p>I'm <a href="https://twitter.com/merowing_">merowing_ on twitter</a> if you feel like talking about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing smooth lines with cocos2d]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2012/04/drawing-smooth-lines-with-cocos2d-ios-inspired-by-paper"/>
    <updated>2012-04-23T21:29:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2012/04/drawing-smooth-lines-with-cocos2d-ios-inspired-by-paper</id>
    <content type="html"><![CDATA[<p>You’ve probably seen <a href="http://www.fiftythree.com/">Paper by http://www.fiftythree.com/</a>, the app is pretty cool and the drawings look really nice and smooth. I’m working on my personal app that needs something similar, and after doing some research I’ve seen that there isn’t really anything like that available, some people try to use catmull roms etc. but that doesn’t look good enough. I will show you how you can achieve pretty cool drawing app.</p>

<!-- more -->


<h2>Analyzing</h2>

<p>If you play with first Paper tool, you will notice few key points that we need to duplicate:</p>

<ol>
<li>Even if you draw fast, the lines will be bend by some kind of splines.</li>
<li>Lines width is depended on the speed of touches.</li>
<li>Lines are very smooth, no hard edges are visible.</li>
</ol>


<p>I will explain my solution in a few steps that allow you to go from this:
<img src="http://www.merowing.info/uploads/2012/04/Step_1.png" width="320" height="240">
to this:
<img src="http://www.merowing.info/uploads/2012/04/Step_4.png" width="320" height="240"></p>

<p>Look at the images in full resolution to really see how big the difference is…</p>

<p>Let’s get to work.</p>

<h2>Connecting the dots</h2>

<p>To draw anything we first need to collect touches positions for drawing. I’ve used UIPanGestureRecognizer to collect them, to have them working with cocos2d I just included <a href="https://github.com/krzysztofzablocki/CCNode-SFGestureRecognizers">my category</a>. After you have some points we need to render them, and since we will be needing line segments that can start at arbitrary width and end at totally different one, we need to make our own rendering. To render the lines with variable width at both ends of a single line segment we need to draw them by using triangles, this is how we can do that:</p>

<p><img src="http://www.merowing.info/uploads/2012/04/figure_1.png" width="320" height="240"></p>

<p>As you can see here:</p>

<ul>
<li>p0, p1 are the line segment begin / end points.</li>
<li>perp is perpendicular to segment direction ( -y, x of direction ), if we normalize it we can use it to create ABCD coordinates, simply by multiplying it by our desired width and either adding or subtracting from our base points p0, p1</li>
<li>ABC, BCD will be our triangles.</li>
<li>both line start and end can have arbitrary width.</li>
</ul>


<p>We need to calculate ABCD coordinates, we have p0, p1 and start width and end width. In code we do this as follows:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGPoint</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">ccpSub</span><span class="p">(</span><span class="n">curPoint</span><span class="p">,</span> <span class="n">prevPoint</span><span class="p">);</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">perpendicular</span> <span class="o">=</span> <span class="n">ccpNormalize</span><span class="p">(</span><span class="n">ccpPerp</span><span class="p">(</span><span class="n">dir</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">A</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">prevPoint</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">prevValue</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">B</span> <span class="o">=</span> <span class="n">ccpSub</span><span class="p">(</span><span class="n">prevPoint</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">prevValue</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">C</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">curPoint</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">curValue</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">D</span> <span class="o">=</span> <span class="n">ccpSub</span><span class="p">(</span><span class="n">curPoint</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">curValue</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>Calculate direction from p0 ( prevPoint ) to p1 ( curPoint )</li>
<li>Calculate perpendicular vector and normalize it.</li>
<li>Use perpendicular multiplied by line width to get coordinates for ABCD.</li>
<li>prevValue / curValue are the widths of line segment start / end points.</li>
</ol>


<p>Then you go through all the points you have and calculate each line segment.</p>

<p>But there is something more you need to do, if you would just calculate each of this vertices per segment, you would end up with disconnected segments:</p>

<p><img src="http://www.merowing.info/uploads/2012/04/figure_2.png" width="320" height="240"></p>

<p>We don’t want that. To make it work let’s make each line C, D vertices the A, B vertices of the next segment, that way we will have proper connection’s between segments, generating full line.</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">connectingLine</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">A</span> <span class="o">=</span> <span class="n">prevC</span><span class="p">;</span>
</span><span class='line'>  <span class="n">B</span> <span class="o">=</span> <span class="n">prevD</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>Since we will need to store position and size in each point, we introduce new class for that:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">LinePoint</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGPoint</span> <span class="n">pos</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">float</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h3>Performance note</h3>

<p>Since the user can draw as many lines as he want and they can be of arbitrary length, if we would draw them in each frame that would very quickly become performance problem. There is a simple solution for that i.e. draw each line segment we get into a texture, that way it doesn’t really matter how many lines user draws or how long they will be. At this point we would just get straight lines connecting our points:</p>

<p><img src="http://www.merowing.info/uploads/2012/04/Step_1.png" width="320" height="240"></p>

<p>Nothing impressive, but this is just the first step…</p>

<h2>Calculating width based on speed of panning</h2>

<p>We need to have slim lines when the user is panning slowly and fat lines if he is moving very quickly, we can use UIPanGestureRecognizer <strong>velocityInView</strong>: method to recognize that:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nf">extractSize:</span><span class="p">(</span><span class="n">UIPanGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">panGestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">vel</span> <span class="o">=</span> <span class="n">ccpLength</span><span class="p">([</span><span class="n">panGestureRecognizer</span> <span class="nl">velocityInView:</span><span class="n">panGestureRecognizer</span><span class="p">.</span><span class="n">view</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">size</span> <span class="o">=</span> <span class="n">vel</span> <span class="o">/</span> <span class="mf">166.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">clampf</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 2</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">velocities</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">*</span> <span class="mf">0.2f</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="p">[[</span><span class="n">velocities</span> <span class="nl">objectAtIndex:</span><span class="p">[</span><span class="n">velocities</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">]</span> <span class="o">*</span> <span class="mf">0.8f</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="n">velocities</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">size</span><span class="p">]];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>We calculate length of velocity vector, then we adjust the value to fit between 1 and 40 pixels.</li>
<li>By weighting new velocity value we will make nicer transition between sizes, instead of jumpy ones…</li>
</ol>


<p>Remember that this function was result of trial &amp; error, so feel free and play around with it if you wan’t…</p>

<h2>Bending the lines</h2>

<p>Research in the internet would suggest to use Catmull-rom algorithm for drawing smooth lines that we want. This splines are one of few splines that go through all control points you specify, it’s really good algorithm for some cases e.g. interpolating Camera position for cutscenes. <strong>But for drawing I don’t believe that to be best solution</strong> because for me it has 2 major caveats:</p>

<ul>
<li>You need to simplify point’s list, so that points are not too close to each other or the algorithm won’t really yield good results.</li>
<li>This algorithm works nice if you have a final set of control points, in case of drawing app you don’t have that, points will be added after user moves his finger, and we need to draw new lines immediately.</li>
</ul>


<p>So contrary to what you can find in google, I decided to <strong>not</strong> use Catmull-rom for drawing app…</p>

<p>Quad curves require 3 points to calculate, we will be using our original touch points as control points and the start / end coordinates will be calculated as the point in the middle between our control points:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSMutableArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">calculateSmoothLinePoints</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">points</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">smoothedPoints</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 2&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">[</span><span class="n">points</span> <span class="n">count</span><span class="p">];</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span><span class="o">%</span><span class="mi">2</span><span class="n">Bi</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">LinePoint</span> <span class="o">*</span><span class="n">prev2</span> <span class="o">=</span> <span class="p">[</span><span class="n">points</span> <span class="nl">objectAtIndex:</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">LinePoint</span> <span class="o">*</span><span class="n">prev1</span> <span class="o">=</span> <span class="p">[</span><span class="n">points</span> <span class="nl">objectAtIndex:</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">LinePoint</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="p">[</span><span class="n">points</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 3&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">CGPoint</span> <span class="n">midPoint1</span> <span class="o">=</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">ccpAdd</span><span class="p">(</span><span class="n">prev1</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">prev2</span><span class="p">.</span><span class="n">pos</span><span class="p">),</span> <span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CGPoint</span> <span class="n">midPoint2</span> <span class="o">=</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">ccpAdd</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="n">prev1</span><span class="p">.</span><span class="n">pos</span><span class="p">),</span> <span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 4&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kt">int</span> <span class="n">segmentDistance</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">ccpDistance</span><span class="p">(</span><span class="n">midPoint1</span><span class="p">,</span> <span class="n">midPoint2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numberOfSegments</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">MAX</span><span class="p">(</span><span class="n">floorf</span><span class="p">(</span><span class="n">distance</span> <span class="o">/</span> <span class="n">segmentDistance</span><span class="p">),</span> <span class="mi">32</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 5&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kt">float</span> <span class="n">t</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">step</span> <span class="o">=</span> <span class="mf">1.0f</span> <span class="o">/</span> <span class="n">numberOfSegments</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">numberOfSegments</span><span class="p">;</span> <span class="n">j</span><span class="o">%</span><span class="mi">2</span><span class="n">B</span><span class="o">%</span><span class="mi">2</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">LinePoint</span> <span class="o">*</span><span class="n">newPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LinePoint</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 6&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">newPoint</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">ccpAdd</span><span class="p">(</span><span class="n">ccpMult</span><span class="p">(</span><span class="n">midPoint1</span><span class="p">,</span> <span class="n">powf</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">t</span><span class="p">,</span> <span class="mi">2</span><span class="p">)),</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">prev1</span><span class="p">.</span><span class="n">pos</span><span class="p">,</span> <span class="mf">2.0f</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">t</span><span class="p">)),</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">midPoint2</span><span class="p">,</span> <span class="n">t</span> <span class="o">*</span> <span class="n">t</span><span class="p">));</span>
</span><span class='line'>    <span class="n">newPoint</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">powf</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">t</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="p">((</span><span class="n">prev1</span><span class="p">.</span><span class="n">width</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="n">prev2</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">)</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="mf">2.0f</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">t</span> <span class="o">*</span> <span class="n">prev1</span><span class="p">.</span><span class="n">width</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="n">t</span> <span class="o">*</span> <span class="n">t</span> <span class="o">*</span> <span class="p">((</span><span class="n">cur</span><span class="p">.</span><span class="n">width</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="n">prev1</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">smoothedPoints</span> <span class="nl">addObject:</span><span class="n">newPoint</span><span class="p">];</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span><span class="o">=</span> <span class="n">step</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 7&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">LinePoint</span> <span class="o">*</span><span class="n">finalPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LinePoint</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">finalPoint</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">midPoint2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">finalPoint</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">width</span> <span class="o">%</span><span class="mi">2</span><span class="n">B</span> <span class="n">prev1</span><span class="p">.</span><span class="n">width</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">smoothedPoints</span> <span class="nl">addObject:</span><span class="n">finalPoint</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 8&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">points</span> <span class="nl">removeObjectsInRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">points</span> <span class="n">count</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)];</span>
</span><span class='line'><span class="k">return</span> <span class="n">smoothedPoints</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>We need at least 3 points to use quad curves.</li>
<li>Each time we need our current point and 2 previous ones.</li>
<li>Calculate our middle points between touch points.</li>
<li>Calculate number of segments, for each 2 pixels there will be one extra segment, minimum of 32 segments and maximum of 128. If 2 mid points would be 100 pixels apart we would have 50 segments, we need to make sure we have at least 32 segments or the bending will look aliased…</li>
<li>Calculate our interpolation t increase based on the number of segments.</li>
<li>Calculate our new points by using quad curve equation. Also use same interpolation for line width.</li>
<li>Add final point connecting to our end point</li>
<li>Since we will be drawing right after this function, we don’t need old points except the last 2. That way each time user moves his finger we can draw next segment.</li>
</ol>


<p>Now we use this smoothed points for drawing, exactly as we did with the old ones… At this point the app generates something like this:</p>

<p><img src="http://www.merowing.info/uploads/2012/04/Step_3.png" width="320" height="240"></p>

<p>It start’s to look interesting, the lines are bending pretty nice ( we could play around with number of segments we used to smooth our lines to get even more quality ). There is quite a bit of aliasing visible here that doesn’t look nice, and also the start / end point of line don’t look nice…</p>

<h2>Anti-Aliasing lines</h2>

<p>Aliasing is pretty common problem in computer graphics, usually you could just use hardware Multisampling, cocos also supports that ( just set proper flags in CCGLView creation ). But this is overkill for our drawing, if we would enable multisampling here, not only we would get performance hit but that way we would also make rest of the app use multisampling… There is a lot simpler solution… Aliasing is so visible because we go from full color straight to an empty one ( black to white ) in an instant. So <strong>let’s not do that</strong>, let’s make the color linearly interpolate from full color to an empty one. We just need to modify alpha value from 1 to 0 over some range of pixels and hardware blending will do the rest for us… Let’s create additional triangles at the edges of our line and modify alpha there:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGPoint</span> <span class="n">F</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">overdraw</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">G</span> <span class="o">=</span> <span class="n">ccpAdd</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">overdraw</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">H</span> <span class="o">=</span> <span class="n">ccpSub</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">overdraw</span><span class="p">));</span>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">I</span> <span class="o">=</span> <span class="n">ccpSub</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">ccpMult</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">overdraw</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>So we just expand even further from our fat line by the amount of overdraw we want, this vertices will have alpha value = 0 so that linear interpolation occur. Then from this vertices we generate 4 overdraw triangles: FAG, AGC, BHD, HDI Since lines can be drawn over each other, we need to make sure our overdraw doesn’t render over full lines, or we would get artifacts… To get correct blending between overdraw / full lines I decided to use GL_ONE, GL_ONE_MINUS_SRC_ALPHA, use pre-multiplied blending (read why it’s better to use it here: http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-alpha.aspx ):</p>

<p><div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">glBlend</span><span class="p">(</span><span class="n">GL_ONE</span><span class="p">,</span> <span class="n">GL_ONE_MINUS_SRC_ALPHA</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<h2>Final touches</h2>

<p>Last thing we need to do is make sure our start / end line points are circular and smooth instead of hard cut off. But we can’t draw full circles at end points or the overdraw alpha would add up and it would look weird, instead we will draw just the half circle placed exactly at the last or first point of line. We need to calculate the exact angle we should start our circle fragment from,</p>

<p><img src="http://www.merowing.info/uploads/2012/04/figure_3.png" width="320" height="240"></p>

<p>As you can see here, we need to figure out what angle of our circle is pointing at C ( Circle is not rotated, it’s just placed at the end point ) , again we can use Perpendicular to line direction to calculate that. I like dot products, so let’s use them to calculate the angle.</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGPoint</span> <span class="n">perpendicular</span> <span class="o">=</span> <span class="n">ccpPerp</span><span class="p">(</span><span class="n">aLineDir</span><span class="p">);</span>
</span><span class='line'><span class="kt">float</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">acosf</span><span class="p">(</span><span class="n">ccpDot</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)));</span>
</span><span class='line'><span class="kt">float</span> <span class="n">rightDot</span> <span class="o">=</span> <span class="n">ccpDot</span><span class="p">(</span><span class="n">perpendicular</span><span class="p">,</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">rightDot</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mf">0.0f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">angle</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>As you probably remember from school the value of dot product of normalized vectors is equal to cos angle between them, we will calculate dot product between the perpendicular to line direction and vector (0, 1). Since we also need to take into consideration the direction of our angle, we should also calculate dot product between perpendicular and right vector, then according to that we can modify the angle. When calculating aLineDir make sure that for start of the line you reverse the direction. The final result of our algorithm should look like this:</p>

<p><img src="http://www.merowing.info/uploads/2012/04/Step_4.png" width="320" height="240"></p>

<h2>Conclusion</h2>

<p><a href="https://github.com/krzysztofzablocki/smooth-drawing">Download project from GitHub.</a>At this point we have a really nice drawing application. I decided to share my solution because I couldn’t find a complete one shared by anyone else… I’m sure it could be improved even more I just don’t have more time to spend on it and I’m pretty pleased with how it works right now, if you manage to improve any parts or find any bug make sure you will send me a pull request on GitHub. I hope you liked it!</p>

<p>I'm <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you feel like talking about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic removal of NSNotificationCenter or KVO observers]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2012/03/automatic-removal-of-nsnotificationcenter-or-kvo-observers"/>
    <updated>2012-03-28T21:51:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2012/03/automatic-removal-of-nsnotificationcenter-or-kvo-observers</id>
    <content type="html"><![CDATA[<p>Observer pattern is common on iOS platform, you use observers in NSNotificationCenter and in Key Value Observing. You need to remember to unregister before you release your observer object, if you don’t you are going to have crashes.For example notification get posted and system tries to inform deallocated object about it, and it crashes.</p>

<p>I’ve created a simple category that takes care of this problem, whenever an object that is observing (NSNotification or KVO) it’s going to be deallocated, it will be unregistered in those systems. The category that I’ve created doesn’t require you to call special methods or do anything fancy. Just include it and you have auto-removal working. It works on both ARC and non ARC code without any settings…</p>

<p>You can <a href="https://github.com/krzysztofzablocki/SFObservers">grab it from GitHub</a> or read more to learn about few tricks I’ve used to make it happen.</p>

<!-- more -->


<h2>Idea</h2>

<p>There are actually 2 categories, one for NSNotificationCenter and second for KVO. They use very similar code so I will just explain a few tricks used to make it work. You are free to look at whole code but I will explain only key points…</p>

<p>Since I wanted to have a category that doesn’t require changing code in existing apps, that meant that the methods you are going to use must stay the same, no custom methods calling or additional code needed to be called. That means I have to swizzle the existing methods with my own.</p>

<p>It should happen only once and it should happen automaticlly, my first thought was
<div><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>this method is called when a class is used for first time, but I’m not subclassing but creating categories so it wouldn’t work correctly. Instead I decided to use <strong>%2B(void)load</strong> as it gets called even for categories. But remember that load is called before main, so you don’t have normal autorelease pool, you need to create one:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//! swap methods</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sf_swapSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">addObserver:forKeyPath:options:context:</span><span class="p">)</span> <span class="nl">withSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">sf_addObserver:forKeyPath:options:context:</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sf_swapSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">removeObserver:forKeyPath:</span><span class="p">)</span> <span class="nl">withSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">sf_removeObserver:forKeyPath:</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">sf_swapSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">removeObserver:forKeyPath:context:</span><span class="p">)</span> <span class="nl">withSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">sf_removeObserver:forKeyPath:context:</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>sf_swapSelector changes default selectors to call sf_ prefixed ones, it also creates a new selectors called sf_original_”originalSelector” that point to original code.</p>

<h2>Data storage</h2>

<p>Next time someone adds / removes observer we need to store that data so that we can operate on it later. Since we need this data when working with the observer object we should store it inside it. <strong>We can use associated references for that.</strong></p>

<p>I have used Dictionary of Arrays ( key is actually keyPath ) of internal object named __SFObserverKVOObserverInfo that looks as simple as that:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">__SFObserversKVOObserverInfo</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">keyPath</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">AH_WEAK</span><span class="p">)</span> <span class="kt">id</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">blockKey</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<p>keyPath and context are self explanatory, blockKey is a key used to access block created by <a href="https://github.com/krzysztofzablocki/NSObject-SFExecuteOnDealloc">SFExecuteOnDealloc</a>( very handy category that allows you to execute any block when an object get’s deallocated,  useful especially when you create advanced categories like this one ).</p>

<h2>Execute on dealloc</h2>

<p>Each time we add new observer, we need to make sure that it will be deallocated automatically, this is the place that SFExecuteOnDealloc get’s really useful:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! 1</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">unsafe_unretained</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">block</span> <span class="kt">id</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">unsafe_unretained</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">block</span> <span class="kt">id</span> <span class="n">weakObserver</span> <span class="o">=</span> <span class="n">observer</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">unsafe_unretained</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">block</span> <span class="kt">id</span> <span class="n">weakContext</span> <span class="o">=</span> <span class="n">aContext</span><span class="p">;</span>
</span><span class='line'><span class="c1">//! 2</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="p">[</span><span class="n">observer</span> <span class="nl">performBlockOnDealloc:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'><span class="c1">//! 3</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">weakSelf</span> <span class="nl">sf_removeObserver:</span><span class="n">weakObserver</span> <span class="nl">forKeyPath:</span><span class="n">keyPath</span> <span class="nl">context:</span><span class="n">weakContext</span> <span class="nl">registeredKeyPaths:</span><span class="n">registeredKeyPaths</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//! 4</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setAllowMethodForwarding:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="c1">//! 5</span>
</span><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">NSObjectKVOSFObserversRemoveSpecificSelector</span><span class="p">),</span> <span class="n">weakObserver</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">,</span> <span class="n">weakContext</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setAllowMethodForwarding:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li><strong>__unsafe_unretained __block </strong>specifier breaks retain cycles on both ARC and non ARC code, and since we are using block we need to make sure we do not create retain cycle ( any obj-c object without it inside a block will automatically be retained as long as the block exists )</li>
<li>We add a new block to be executed when observer get’s deallocated</li>
<li>We check and remove data from our internal structure for specified options, it will return YES if something was actually removed ( prevents removal of objects that isn’t observer anymore )</li>
<li>Enables method forwarding, more on this later…</li>
<li>Calls original method, we are using<strong> NSSelectorFromString to prevent compiler warnings about unknown selectors, just a clever trick I came up with.</strong></li>
</ol>


<h2>Method Forwarding</h2>

<p>Let me explain what happens in point 4.</p>

<p>When we call our original selector, theoretically we skip our swizzled function and go straight to original implementation,<strong> BUT the system calls from this original method other methods we swizzled </strong>for example when you just call removeObserver: for NSNotificationCenter it may call more specific removeObserver:name:object: for each object that is registered.</p>

<p>We swizzled original selector to point to our method, so now its important that we proceed carefully. There are 2 cases our removeObserver: methods can be called:</p>

<ol>
<li>Programmers call removeObserver somewhere from the application code.</li>
<li>The methods get called due to original implementation calling different methods. (This will be identified as our method forwarding).</li>
</ol>


<p>We could try to mimic original behavior in our code by analyzing every call and recreating the algorithm they use <strong>but this could break if apple changes something</strong>, instead I figured out that since code is executed synchronously we can identify both cases, that’s why we have <strong>allowMethodForwarding</strong> property. Look at the code of our removeObserver:</p>

<p><div><div class='bogus-wrapper'><notextile><button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sf_removeObserver:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">observer</span> <span class="nf">forKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 1</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="n">allowMethodForwarding</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">SF_OBSERVERS_LOG_ORIGINAL_METHODS</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Calling original method %@ with parameters %@ %@&quot;</span><span class="p">,</span> <span class="n">NSObjectKVOSFObserversRemoveSelector</span><span class="p">,</span> <span class="n">observer</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">NSObjectKVOSFObserversRemoveSelector</span><span class="p">),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="c1">//! 2</span>
</span><span class='line'>  <span class="n">NSMutableDictionary</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">registeredKeyPaths</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSMutableDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">observer</span><span class="p">,</span> <span class="n">AH_BRIDGE</span><span class="p">(</span><span class="n">NSObjectKVOSFObserversArrayKey</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="nl">sf_removeObserver:</span><span class="n">observer</span> <span class="nl">forKeyPath:</span><span class="n">keyPath</span> <span class="nl">context:</span><span class="nb">nil</span> <span class="nl">registeredKeyPaths:</span><span class="n">registeredKeyPaths</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">SF_OBSERVERS_LOG_ORIGINAL_METHODS</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Calling original method %@ with parameters %@ %@&quot;</span><span class="p">,</span> <span class="n">NSObjectKVOSFObserversRemoveSelector</span><span class="p">,</span> <span class="n">observer</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//! 3&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">setAllowMethodForwarding:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="n">objc_msgSend</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">NSObjectKVOSFObserversRemoveSelector</span><span class="p">),</span> <span class="n">observer</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setAllowMethodForwarding:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></div></p>

<ol>
<li>If we are method forwarding just call original selector and return.</li>
<li>Check our internal structure if we can remove object ( we prevent removing object that isn’t observer ).</li>
<li>Since this is called by our code and not by method forwarding, enable method forwarding in case original code calls other swizzled selectors then disable it afterwards.</li>
</ol>


<h2>Conclusion</h2>

<p>You no longer need to call removeObserver in your dealloc methods, that especially useful when using ARC as you won’t need to create dealloc at all in 95 % classes in your application. You also learned, that you could use <strong>NSSelectorFromString </strong>to prevent compiler from generating warning for dynamically created methods, that <strong>__unsafe_unretained \__block</strong> specifier is the correct way to break retain cycles on code that needs to be run both on ARC and non ARC.</p>

<p>Also you can have seen how to be on the safe side when swizzling multiples methods that can call each other by identifing <strong>methodForwarding</strong>,  instead of trying to recreate system behavior that could change <strong>at any iOS update.</strong></p>

<p>I'm <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you feel like talking about it.</p>
]]></content>
  </entry>
  
</feed>
