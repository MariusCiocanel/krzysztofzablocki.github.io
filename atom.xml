<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Krzysztof Zabłocki]]></title>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/atom.xml" rel="self"/>
  <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/"/>
  <updated>2015-05-05T03:37:48+02:00</updated>
  <id>http://krzysztofzablocki.github.com/krzysztofzablocki/</id>
  <author>
    <name><![CDATA[Krzysztof Zabłocki]]></name>
    <email><![CDATA[krzysztof.zablocki@pixle.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extracting data from websites without API and calculating your needed calories - MyFitnessPal and Ruby + Mechanize]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2015/01/extracting-data-from-websites-without-api"/>
    <updated>2015-01-15T16:40:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2015/01/extracting-data-from-websites-without-api</id>
    <content type="html"><![CDATA[<p>As a programmer I like to automate stuff, I love being able to extract the data I’m tracking and visualise and analyze it in many different ways.</p>

<p>I’ve been using MyFitnessPal for years, and I’ve collected a big amount of nutrition / weight data, as such I wanted to be able to play with that data in my own environment, unfortunately MyFitnessPal did not give me API access, even though I’ve asked twice.</p>

<p>As such I’ve decided to get that data in other means, Web crawling with Ruby and Mechanize is one option.</p>

<p>Let’s see how we can extract nutrition summary and weight data, meaning calories/macros and weight measurements.</p>

<!-- more -->


<h1>Finding good entry-point</h1>

<p>After logging in into MyFitnessPal we can go into Reports Tab, it shows you graphs of your data. Since we want raw data instead of graphics, We can use View Page Source and look for something that looks interesting. It was easy to find this:</p>

<p><img src="http://krzysztofzablocki.github.com/krzysztofzablocki/uploads/2015/01/report1.png" alt="" /></p>

<p>I can now use this endpoint to see my weight data:
<a href="http://www.myfitnesspal.com/reports/results/progress/1/30.json">http://www.myfitnesspal.com/reports/results/progress/1/30.json</a></p>

<p>Further analysis found this to be the case:
- /progress/1 is weight data
- /30 means number of days to return
- Nutrition/Calories Nutrition/Protein Nutrition/Carbs Nutrition/Fat are some of the other available reports</p>

<blockquote><p>When I was doing initial work on my fitness app I’ve not used .json but regular report, back then I’ve used mechanize  with xpath / css selectors to crawl data.</p></blockquote>

<h1>Accessing data from code</h1>

<p>Our data is protected, so before we are able to extract it we need to login into MyFitnessPal website to have valid login cookie.</p>

<h3>Ruby</h3>

<p>Ruby is a great and easy to grasp language, in our case the usage will only require few explanations:</p>

<ul>
<li>Ruby files end with .rb</li>
<li>You can run ruby file from command line by calling <code>ruby file.rb</code></li>
<li>gem’s are v. similar to CocoaPods, that’s actually what inspired Pods in first place.</li>
</ul>


<p>If you want to learn more about it, I recommend <a href="http://tryruby.org">http://tryruby.org</a>.</p>

<h2>Getting valid login credential cookie</h2>

<p>First let’s look at Login website in a browser
<a href="https://www.myfitnesspal.com/account/login">https://www.myfitnesspal.com/account/login</a></p>

<p><img src="http://krzysztofzablocki.github.com/krzysztofzablocki/uploads/2015/01/login.png" alt="" /></p>

<p>Again looking at the Page Source we know that:
- There is only 1 form on the page
- The input fields id are <code>username</code> and <code>password</code></p>

<p>Filling this form with Ruby and Mechanize is very straightforward.</p>

<p>First we need to install mechanize gem:</p>

<p><code>gem install mechanize</code></p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mechanize&#39;</span>
</span><span class='line'><span class="c1"># 1</span>
</span><span class='line'><span class="n">mechanize</span> <span class="o">=</span> <span class="no">Mechanize</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">login_page</span> <span class="o">=</span> <span class="n">mechanize</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;https://www.myfitnesspal.com/account/login&#39;</span>
</span><span class='line'><span class="c1"># 2</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">login_page</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="c1"># noinspection RubyResolve</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">field_with</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;username&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;username&quot;</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">field_with</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'><span class="c1"># 3</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">submit</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>We create a Mechanize agent and load the login page.</li>
<li>There is only one form on the login page, we grab it and fill the user data.</li>
<li>After submitting our form, mechanize will store the login cookie in the agent, which means all further requests on this agent will be properly authorised.</li>
</ol>


<h2>Retrieving reports</h2>

<p>Now that we have a valid credentials we can access our report data, let’s grab 30 days worth of our weight and calories data:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">weight_report</span> <span class="o">=</span> <span class="n">mechanize</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;http://www.myfitnesspal.com/reports/results/progress/1/</span><span class="si">#{</span><span class="n">days_to_query</span><span class="si">}</span><span class="s2">.json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">calories_report</span> <span class="o">=</span> <span class="n">mechanize</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;http://www.myfitnesspal.com/reports/results/nutrition/Calories/</span><span class="si">#{</span><span class="n">days_to_query</span><span class="si">}</span><span class="s2">.json&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">weights</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">weight_report</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">calories</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">calories_report</span><span class="o">.</span><span class="n">body</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;data&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>We use mechanize to request our reports and then parse the json into hash, we are only intersted in raw data so we extract that.
Also the data array is sorted by dates already so we can avoid manual sort here.</p>

<h1>Calculating our caloric needs</h1>

<p>Now that we have both weight and intake calories, we can start calculating our needs to maintain our current weight.</p>

<blockquote><p>The more data you have is usually the better, especially for calculating your weight.</p></blockquote>

<p>Then we just extract the values and calculate average calories intake.</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">avg_calories</span> <span class="o">=</span> <span class="n">calories</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>I got 1045 calories, seems a bit low, doesn’t it?
Just calculating average would work great if we were perfect at tracking, but sometimes we just aren’t,<strong>although I would highly recommend you at least estimate and track that when you eat out</strong>.</p>

<p>We’ll end up averaging data that has some missing entries thus lowering the average, how can we deal with that?
For simplicity we can simply reject entries that are missing data, before calculating the average, this will work if your diet is steady.</p>

<p>Let’s modify our previous line to do just that</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">avg_calories</span> <span class="o">=</span> <span class="n">calories</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now I got 1796.5 calories, this seems to look correct since I’m in cutting phase.</p>

<h2>Weight change</h2>

<p>It’s crucial that we smooth our weight data, weight can fluctuate quite a lot and we want to see the trend we are having, not just the values.</p>

<p>I like to use smoothed moving average for my data, there is a ruby gem <code>moving_average</code> that simplifies that so let’s use it:</p>

<p><code>gem install moving_average</code></p>

<p>And on top of our script add requirement for it:</p>

<p><code>require moving_average</code></p>

<p>Take a look at graph visualising my weight changes, the diamonds are the raw measurements, if I didn’t apply smoothing function it would be really hard to see the trends of my weight changes.</p>

<p><img src="http://krzysztofzablocki.github.com/krzysztofzablocki/uploads/2015/01/weight.png" alt="" /></p>

<p>With weights we want to calculate smoothed average for each entry, not just one average</p>

<blockquote><p>The best way would be to have a long period of data, so that the beginning weight we are analysing is already smoothed and not influenced by fluctuations.</p></blockquote>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">weight_values</span> <span class="o">=</span> <span class="n">weights</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="s1">&#39;total&#39;</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="n">smoothed_weights</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">weight_values</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">idx</span><span class="o">|</span>
</span><span class='line'>  <span class="n">smoothed_weights</span><span class="o">.</span><span class="n">push</span><span class="p">(</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">weight_values</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="n">smma</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">weight_values</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>That way each smoothed weight entry will depend on the previous values (it’s tail).</p>

<p>Now we can grab first and last entry and see how our average changed:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">weight_change</span> <span class="o">=</span> <span class="n">smoothed_weights</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="n">smoothed_weights</span><span class="o">.</span><span class="n">last</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Each kg of weight is approximately 7700 kcal, so we can calculate how much calories are we under / over our intake by just multiplying by 7700.</p>

<h2>How much do we need to eat to maintain our weight?</h2>

<p>Now that we know our average intake and weight change, we can calculate our TDEE, which means calories we should be eating to keep our weight stable.</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Observed TDEE is </span><span class="si">#{</span><span class="n">avg_calories</span> <span class="o">+</span> <span class="n">weight_in_calories</span> <span class="o">/</span> <span class="n">weights</span><span class="o">.</span><span class="n">count</span> <span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>For me it’s <strong>2257 kcal</strong></p>

<p>Usually evaluate that once every 10-14 days, to make sure you are on track.</p>

<h1>Diet composition</h1>

<p>How should you divide your calories into macros, like Protein/Fat/Carbs?</p>

<p>Doesn’t matter if you bulk or cut, this is the order of importance of macros I recommend:
1. Protein - crucial for your body, 4 kcal / 1g
2. Fat - get your essential fat intake for healthy hormones, 9 kcal / 1g
3. Carbs - remaining calories, 4 kcal / 1g</p>

<p>A good starting point for composition would be:
- Protein: 2g / kg
- Fat: 0.8g / kg
- Carbs: Remaining intake</p>

<p>e.g. For me it looks as follows:</p>

<pre><code>kcal 2256
protein = 76 kg * 2 = 152 protein
fat = 76 kg * 0.8 = 60.8 fat
carbs = (2256 - (152*4 + 60.8 * 9))/4 =&gt; 275.2 carbs
</code></pre>

<h1>Goals</h1>

<h2>Bulking - Gaining Muscle</h2>

<p>If you are looking to gain muscle (because gaining weight shouldn’t be the goal), you should be looking at maximum 0.2 kg per week.</p>

<p><code>0.2 kg * 7700 kcal =&gt; 1 540 kcal per week / 7 =&gt; 220 kcal</code></p>

<p>Eat around 200 kcal over your TDEE and you should be gaining mostly lean muscle, gaining a little bit of fat is almost inevitable but if adjust your intake correctly it will be minimal, don’t stress it.</p>

<h2>Cutting - Loosing weight</h2>

<p>Loosing weight is actually simpler than gaining lean muscle, you need to eat less than your TDEE, how much less will depend on your goal and bodyfat level.</p>

<p>The leaner you are the slower you should be loosing weight, to spare muscles and to not feel like you are dying, general recommendation would be something like this:</p>

<ul>
<li>12+% bodyfat: eat 750 kcal below TDEE - refeed every 14 days</li>
<li>8-12% bodyfat: eat 500-700 kcal below TDEE – reefed every 7-10 days</li>
<li>&lt;8% bodyfat: eat 300-500 kcal below TDEE – reefed every 3-7 days</li>
</ul>


<h2>Refeed day</h2>

<p>A refeed day is a day that you want to eat around your TDEE, usually increasing your carb intake, you could treat this as cheat meal (not cheat day, all-out pig feast).
It’s beneficial for your body and mind, if you were on spot with your diet, you deserve to have a little treat.</p>

<h1>Conclusion and Next Actions</h1>

<p>So now that you know how to calculate your real TDEE, you should  calculate it and then apply either surplus or deficit as I just described, evaluate for next 2 weeks and adjust if needed.</p>

<p><a href="https://gist.github.com/krzysztofzablocki/f5f597f04b2efcb711c7">Whole script is available here</a></p>

<p>For more info either go read my previous blog posts:</p>

<p><a href="http://www.merowing.info/2014/02/fit-geek/">Fit Geek</a></p>

<p><a href="http://www.merowing.info/2014/09/a-swift-introduction-into-fitness/#.VLfecsaJn8s">Swift introduction to Fitness</a></p>

<p>or visit my <a href="https://www.youtube.com/channel/UCv58ZNeKPIsn7BDJYdGud_w" title="YouTube channel">YouTube Chanel</a></p>

<p>You can also <a href="http://twitter.com/merowing_">Follow me on Twitter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playgrounds for Objective-C]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/playgrounds-for-objective-c"/>
    <updated>2014-10-23T12:03:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/playgrounds-for-objective-c</id>
    <content type="html"><![CDATA[<p>Everyone loves Swift playgrounds, they are awesome, Apple has made amazing job with Xcode 6 and Playgrounds were the icying on the cake.</p>

<p>But since most of us still need to write Objective-C I&#8217;ve created Playgrounds for Objective-C:</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/109757619 "></iframe></div>


<h3>Features</h3>

<ul>
<li>Faster than Swift playgrounds (a lot)</li>
<li>Extra controls for tweaking:</li>
<li>Adjustable values</li>
<li>Autoanimated values</li>
<li>Buttons</li>
<li>IDE agnostic, once you run it, you can modify the code even from vim.</li>
<li>Full iOS simulator and access to all iOS features, so you can prototype production ready code.</li>
<li>Nice DSL for rapid prototyping</li>
<li>CocoaPods support, so you can add it to existing projects to experiment</li>
<li>Open source, anyone can contribute to make them better!</li>
</ul>


<p>And it’s just a start.</p>

<p><a href="https://github.com/krzysztofzablocki/KZPlayground">Source code on GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Project Bootstrap]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/ios-project-bootstrap"/>
    <updated>2014-10-15T14:52:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/ios-project-bootstrap</id>
    <content type="html"><![CDATA[<p>As we are approaching 2015 I&#8217;m working on refreshing my project bootstrap. It&#8217;s still work in progress but I think you&#8217;ll like it already:
<a href="https://github.com/krzysztofzablocki/KZBootstrap">Check it out on github.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I work?]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/how-do-i-work"/>
    <updated>2014-10-06T15:21:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/10/how-do-i-work</id>
    <content type="html"><![CDATA[<p>I’ve been programming for 18 years now, doing commercial work for the last 6, over the years I’ve been exposed to different ideas and experiences that have constantly affect the way I write code, what matters and how I go about working for my clients. I’d like to share some insights in what is my current approach to few common topics.</p>

<!-- more -->


<p>Over last 3 years I’ve been mostly tasked with hands-on leadership roles, my goals were to deliver project on time and with good quality.</p>

<h2>Mindset - Put yourself in your clients shoes</h2>

<p>Whenever working on a project I like to think about it as my own project, I try to understand not only technical aspects of the project but also its business goals.</p>

<p>Care deeply and it&#8217;s easier to deliver quality work, avoiding shortcuts and making sure the client will succeed, and if they succeed then they’ll probably come back to you. It’s a win-win.</p>

<h2>Establishing consistency when joining new teams</h2>

<p>Whenever I join new team, I like to know if there are any established convention for code style, quality and similar.</p>

<p>If there aren’t, I share my guidelines and process description and ask the rest of the team to read it and then have a discussion if they agree with it or we should adjust some things.</p>

<p>One has to remember that code style is subjective and there usually isn’t a right or wrong answer, what matters, though, is consistency.</p>

<p>I’ve no problem using someone else&#8217;s code style but I wouldn’t want to work on a project that has inconsistent style / approach to coding as this is a sign of low quality.</p>

<p>It’s important to learn your team-members strong and weak sides and get to know them as people, not just developers.</p>

<h2>Code Quality</h2>

<p>Quality is something I’m not really willing to negotiate on, I want the projects I work on to at least have:</p>

<ul>
<li>-Weverything - enable all warnings as default, disable  some selectively</li>
<li>Treat warnings as errors - there are proper reasons warnings exist</li>
<li>Add Guards for UIKit/CoreData + threading</li>
<li>Scripts that will raise developer attention for TODO/s and code smells</li>
</ul>


<p>I would also prefer to have BDD tests in the project. I prefer BDD over TDD as it’s more focused on what matters for the client, I will use TDD when working on a library or some reusable part of the app but keep BDD for more general code.</p>

<p>Many people think tests make you slower, but even if we put long-term effects of quality aside (tests are definitely worth it in long run) you can also see that tests can actually allow you to iterate quickly:</p>

<ul>
<li>If you are blocked by lack of API endpoints you can mock your data and still implement your part of the logic</li>
<li>Executing tests is usually much faster than running whole app and navigating to specific feature, I can adjust and run few iterations of tests in the time it would take me to just launch the whole app once</li>
<li>Regression testing - afraid of refactoring ? never again</li>
</ul>


<p>Remember to use Continuous integration if you do testing, be it Jenkins or Xcode bots. I don’t trust developers to always run tests (including myself).</p>

<h3>Refactoring</h3>

<p>I constantly refactor my code, I don’t allocate time for doing it, I just do it every time I see something is not correct.</p>

<p>If your IDE makes it hard to refactor your code, upgrade your IDE. I’ve been using <a href="http://www.jetbrains.com/objc/">AppCode</a> and Xcode with same project opened in parallel for last 3 years.</p>

<h2>Coordinating work with other developers</h2>

<p>When it comes to version control, I prefer git with git-flow approach to branching, git-flow is mature and is becoming industry standard.</p>

<p>I also like to leverage the fact that you can integrate JIRA/Bitbucket/Github together:</p>

<ul>
<li>naming your branches same as tasks in JIRA will make them clickable links</li>
<li>commit messages can close or reference tasks</li>
</ul>


<p>Automating this kind of tasks will improve efficiency and make it much easier to find references if needed, e.g. <em>When you need to reverse a feature, find it in jira and then you get commit hash that created it.</em></p>

<p>I like to have at least 2 developers on every project, even if part-time, as this will avoid situations when a person needs to take vacation or leaves the company and the whole project has to stall or we need to bring in a new developer up to date before we start making progress again.</p>

<p>There is no <em>this is my code</em> or <em>I didn’t write this</em>, team-work and shared codebases, it doesn’t matter who wrote code that has bugs, everyone makes mistakes and it’s the team’s responsibility to fix them.</p>

<p>I prefer to <strong>avoid</strong> assigning particular roles for a developer:</p>

<ul>
<li>e.g. Michael does UI and Matt does the Model</li>
</ul>


<p>I’d like to see Michael leading the harder UI Work with Matt pairing with him and vice versa on model stuff, simpler parts would be split so that each of them can work on both model and UI.</p>

<p>This again will prevent stalling situations but it will also allow developers to learn more from each other, allowing them to grow their expertise and thus increase their value.</p>

<p>I also believe good developers enjoy learning new stuff and they grow impatient and resentful if they can’t, so by allowing them to learn more we will limit rotation (leaving) in company.</p>

<h2>CocoaPods or Submodules ?</h2>

<p>I love <a href="http://cocoapods.org/">CocoaPods</a>, but I sometimes use submodules as well (e.g. Swift code right now doesn’t work with CocoaPods).</p>

<p>Either one will work, whatever you decide, make sure you use them correctly.</p>

<p>If you use CocoaPods, then commit them to repository. If you use submodules then I’d like to have them forked. Why?</p>

<p>Version control is meant to keep working project across the history, if I’ll want to run foldify code 10 years from now I want it to work by just pulling from repo.</p>

<p>If we don’t commit pods this might happen (or have happened before):</p>

<ol>
<li>CocoaPods repository goes down -> can’t work</li>
<li>New OSX version have issue with CocoaPods gem -> can’t work</li>
<li>Someone removes their git project and you can’t install it anymore -> oh, I guess you won’t get much sleep tonight</li>
<li>You got access to a project but not to private cocoapods that the project used? -> can’t work</li>
<li>CI build has a bug that your developers can’t reproduce? -> I guess you were using :head and didn’t commit pods.</li>
</ol>


<p>Similar issues might happen with submodules.
If you commit pods, all of the above will go away.</p>

<h3>Code reviews</h3>

<p>I don’t care if you are ex-apple, twitter, Facebook or any other kind of self-established genius, everyone makes mistakes, myself included.</p>

<p>Code reviews are helpful in finding avoidable bugs before they reach your client.
I like to have peer code reviews, and it has few advantages over  only team leads doing it:</p>

<ul>
<li>Shared knowledge of code base, since usually few developers work on a project I would like to see everyone knowing they way around the code base.</li>
<li>Bottleneck and avoiding quick approvals. There is only limited amount of work one can do, having one or two person responsible for Code Review makes them bottleneck for whole team + people under stress will compromise quality of the review.</li>
</ul>


<p>Keeping branches and code reviews small is crucial, I always give this imaginary example:
- If you give a developer 100 lines of code to review they will find 10 bugs.
- How many bugs will they find in 1000 lines of code? 10</p>

<p>Too much code to read or review is overwhelming for most developers because of limited working memory capacity, keep it small so people can focus.</p>

<p>Big advice when it comes to Code reviews:</p>

<blockquote><p>Don&#8217;t take it personally if someone critiques code that you wrote, they are critiquing code and not you as a person.</p></blockquote>

<p>I like when people challenge my code because I can learn from their experience and improve it.</p>

<h2>What do I do when I have free time?</h2>

<p>There are high and low times in every project, sometimes we are blocked waiting for someone else to deliver their part , etc.</p>

<p>What I like to do is try during that time is to either (ordered by preference):</p>

<ul>
<li>Find ways to help improve company efficiency, often by creating tools and libraries to help solve common issues:

<ul>
<li><a href="https://github.com/krzysztofzablocki/crafter">https://github.com/krzysztofzablocki/crafter</a></li>
<li><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">https://github.com/krzysztofzablocki/KZPropertyMapper</a></li>
<li><a href="https://github.com/krzysztofzablocki/IconOverlaying">https://github.com/krzysztofzablocki/IconOverlaying</a></li>
</ul>
</li>
<li>Share my experience with other developers and teams, I often speak at public conferences but I also do Lunch &amp; Learn sessions for my employers</li>
<li>Research new technologies that we could use in future projects</li>
</ul>


<h1>Conclusion</h1>

<p>I didn’t use to do some of those things when I was starting out, some of the things I did were exactly the opposite of what I do now, we constantly learn from our own mistakes.</p>

<p>I’d love to hear how does your process and mindset look like, especially if it’s very different from mine!</p>

<p>I&#8217;m <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you feel like sharing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Swift introduction into Fitness]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/09/a-swift-introduction-into-fitness"/>
    <updated>2014-09-30T12:17:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/09/a-swift-introduction-into-fitness</id>
    <content type="html"><![CDATA[<p><a href="http://merowing.info/uploads/2014/09/IntroToFitness.playground.zip">Download this article as Playground</a> for XCode 6 to be able to experiment with calculations.</p>

<p>Many people think getting fit is hard, the fitness industry is full of myths and unnecessary complications.</p>

<p>Doesn’t matter if your goal is to lose weight or gain it, what matter is Physics and law of energy:</p>

<p><em>If you burn more calories than you eat you will lose weight</em></p>

<p>Same goes for bulking, eat more and you gain weight.</p>

<p>Two questions arise:</p>

<ol>
<li>how to estimate our caloric needs?</li>
<li>how fast should we lose or gain weight?</li>
</ol>


<p>It’s easy enough to explain both, but since I’m a programmer and I really like Swift playgrounds, let’s use some swift to do express math for us.</p>

<!-- more -->


<h1>Defining user</h1>

<p>Before we start calculating our caloric needs we will need to have access to our user stats.</p>

<p>We could define a struct for our user or we can simplify it and use tuple:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum Gender {
</span><span class='line'>  case Male
</span><span class='line'>  case Female
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>typealias User = (gender: Gender, age: Int, weightInKg: Double, heightInCm: Int, bodyfat: Int?)</span></code></pre></td></tr></table></div></figure>
</div>


<p>Don’t worry if you use Imperial system for measurements, let’s introduce conversion functions:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func toKg(#lbs: Double) -> Double {
</span><span class='line'>  return lbs / 2.2
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func toCm(#feet: Double, #inches: Double) -> Double {
</span><span class='line'>  return feet * 30.48 + inches * 2.54
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now we can setup our user by simply assigning it to variable:</p>

<div>
<figure class='code'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var user = User(gender: .Male, age: 26, weightInKg: 73, heightInCm: 184, bodyfat: 10)</span></code></pre></td></tr></table></div></figure>
</div>


<h1>How to estimate calories we should eat?</h1>

<p>The only real way to know how much calories you should eat would be to track your food intake and weight changes over couple of weeks, then we can calculate your personal calories accurately.</p>

<p>But there are few math approximations we can use as a starting point, we’ll take a look at 2 most accurate ones but first some theory.</p>

<p>There are few components we need to consider when calculating our caloric needs:</p>

<h2>BMR - Basal Metabolic Rate</h2>

<p>BMR defines bulk of our caloric needs, it can be thought of as calories you would need if you stayed in bed all day and didn’t do anything eg. Comatose. Resting Metabolic Rate can be considered same as BMR .</p>

<p>It will decrease with age or with loss of LBM - lean body mass, if you have more muscles then you’ll have higher BMR, but the effect of having more muscle mass doesn’t have (as previously thought) high enough effect on BMR to be used for fat loss purpose (<strong>dreamers bulking</strong> to have more muscle and thinking that will make your fat loss phase easier is just stupid).</p>

<p>Since we will be using one of two functions to calculate BMR, let’s create a typealias for our calculator:</p>

<div>
<figure class='code'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typealias BMRCalculator = () -> Double</span></code></pre></td></tr></table></div></figure>
</div>


<h2>NEAT and Activity Factor- Non-Exercise Associated Thermogenesis</h2>

<p>NEAT is calories we burn doing stuff that’s not exercise, eg. washing/talking/working.</p>

<p>NEAT is calculated by selecting an activity factor multiplier dependent on your lifestyle, let’s define some common values:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum ActivityFactor: Double {
</span><span class='line'>  case Sedentary = 1.2 // Little or no exercise and desk job
</span><span class='line'>  case LightlyActive = 1.375 // Light exercise or sports 1-3 days a week
</span><span class='line'>  case ModeratelyActive = 1.55 // Moderate exercise or sports 3-5 days a week
</span><span class='line'>  case VeryActive = 1.725 // Hard exercise or sports 6-7 days a week4
</span><span class='line'>  case ExtremelyActive = 1.9 // Hard daily exercise or sports and physical job
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<h2>TEF - Thermic Effect of Feeding</h2>

<p>TEF is used to calculate amount of calories you burn while eating, it will mostly depend on the amount of Protein and Fiber content in your diet as they influence how much energy is needed for converting food into energy.</p>

<p>It does <strong>NOT</strong> depend on the amount of meals you have, doesn’t matter if you eat 2k calories in 1 or 6 meals, TEF is percentage based on total intake.</p>

<p>Values would vary depending on protein intake mostly:
0.05 to 0.15 from low to high protein intake (1-3g of protein / kg), but for most people starting out this difference will fall into calculation error margin so let’s not worry about it for now.</p>

<h2>MET - Metabolic Effect of Training</h2>

<p>MET is amount of calories you burn during exercise, as such it only applies for training days.</p>

<h2>TDEE - Total Daily Energy Expenditure</h2>

<p>TDEE is total amount of calories you need to maintain your current weight, it’s affected by all of the above, but we’ll be calculating TDEE without taking TEF (because for beginners it will be negligible) and MET (only applies to training days).</p>

<p>We can define TDEE as follows:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func TDEE(bmrCalculator: BMRCalculator, activityFactor: ActivityFactor) -> Int {
</span><span class='line'>  return Int(bmrCalculator() * activityFactor.rawValue)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<h2>BMR Equations</h2>

<p>Two most accurate equations for calculating BMR are:</p>

<ol>
<li>Cunningham Equation - if we know user lean body mass (simply weight * (100-bodyfat%))</li>
<li>Mifflin St Jeor - if body fat is unknown</li>
</ol>


<p>Let’s write a function generator that will return a proper calculator for a specific user:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func lbm(user: User) -> Double {
</span><span class='line'>  return user.weightInKg * (100.0-Double(user.bodyfat!))/100.0
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func BMRCalculatorForUser(user: User) -> BMRCalculator {
</span><span class='line'>  func cunninghamCalculator(user: User) -> BMRCalculator {
</span><span class='line'>    return { 500 + 22 * lbm(user) }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  func mifflinCalculator(user: User) -> BMRCalculator {
</span><span class='line'>    let genderAdjustment = user.gender == .Male ? 161.0 : -5.0
</span><span class='line'>    return { 10.0 * user.weightInKg + 6.25 * Double(user.heightInCm) + genderAdjustment }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  if let bodyfat = user.bodyfat {
</span><span class='line'>    return cunninghamCalculator(user)
</span><span class='line'>  }
</span><span class='line'>  return mifflinCalculator(user)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<h1>Calculating maintenance</h1>

<p>Now we have enough code to calculate our TDEE needs:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user = User(gender: .Male, age: 26, weightInKg: 73, heightInCm: 184, bodyfat: 10)
</span><span class='line'>let tdee = TDEE(BMRCalculatorForUser(user), ActivityFactor.Sedentary)
</span><span class='line'>println("You can maintain your weight by eating \(tdee) kcal daily")</span></code></pre></td></tr></table></div></figure>
</div>


<h1>Personal Goals</h1>

<p>Now that we have calories to maintain our weight, let’s look at possible goals for a user:</p>

<ol>
<li>Fat Loss - we want to cut some fat</li>
<li>Muscle gain - when we want to gain muscle</li>
</ol>


<p>I didn’t use word weight here for a reason, when you bulk you want to gain muscle, you don’t want to get fat.
Same goes for fat loss, we don’t want to lose hard earned muscle tissue, only fat and as such aiming at highest possible weight loss is usually mistake.</p>

<p>How fast can we change our weight?</p>

<p>1 KG of weight is considered to amount to ~7700 calories:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func caloriesForWeight(kgs: Double) -> Double {
</span><span class='line'>  return kgs * 7700
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Fat loss</h2>

<p>It could be fast if you were willing to really restrict calories, but one have to be careful to avoid muscle loss. Starvation mode is a myth but you might be miserable when you do very strict diet. I’d suggest going slower but steady, having around 0.5 kg fat loss per week wouldn’t be bad, in 10 weeks you’d have 5 kg of FAT less.</p>

<p>If you feel like it’s a bit too fast or to slow, adjust the value and see how much less you’d need to eat daily to hit your desired speed:</p>

<div>
<figure class='code'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>println("daily deficit: \(caloriesForWeight(0.5) / 7.0)")</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Muscle gain</h2>

<p>Muscle gain is hard, we can’t just overeat and expect to gain more muscle, doing so will end up with getting fat and having to go into Fat Loss phase, it will make you miserable in long run.</p>

<p>Avoid dreamers bulk, better to go slow and steady, what should be your weekly aim? It will heavily depend on your current conditioning:</p>

<p>On average, a guy doing everything right (Perfect diet etc.) will be doing very well to gain 0.2kg of muscle per week. A female might gain half that or about 0.2kg of muscle every 2 weeks.</p>

<p>The more advanced you are, the slower you should be gaining weight to avoid getting too much fat.</p>

<p>So we have 2 weight goals, bulking and cutting:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typealias Goal = () -> Double
</span><span class='line'>func bulking(#kgPerWeek: Double) -> Goal {
</span><span class='line'>  return {+kgPerWeek/7}
</span><span class='line'>}
</span><span class='line'>func cutting(#kgPerWeek: Double) -> Goal {
</span><span class='line'>  return {-kgPerWeek/7}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
</div>


<h1>Final calculation</h1>

<p>Now we can finally calculate daily calories needed to reach our goals:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><figcaption><span>swift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func dailyCalories(tdee: Int, #goal: Goal) -> Int {
</span><span class='line'>  return Int(Double(tdee) + (caloriesForWeight(goal())))
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>let target = dailyCalories(tdee, goal: bulking(kgPerWeek: 0.2))
</span><span class='line'>println("You should be eating \(target) kcal everyday")</span></code></pre></td></tr></table></div></figure>
</div>


<h1>Conclusion</h1>

<p>This should make starting your fitness journey easier, it also shows how cool playgrounds are. If you are interested in more fitness tips especially about loosing fat I recommend you take a look at my <a href="http://www.merowing.info/2014/02/fit-geek/">previous article</a></p>

<p><a href="http://twitter.com/merowing_">Follow me on twitter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing less code]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/08/writing-less-code"/>
    <updated>2014-08-27T17:05:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/08/writing-less-code</id>
    <content type="html"><![CDATA[<p>What are some of my favorite techniques for cleaner and more readable code?</p>

<!-- more -->


<p>Over the years I’ve become very pedantic when it comes to code quality.</p>

<p>All my projects use -Weverything &amp; <em>treat warnings as error</em> and only selectively disable warnings if there is a valid reason to do so.</p>

<p>My code still have bugs every now and then, no way around this, everyone makes mistakes. There are many ways in which one can improve quality and limit bugs, TDD/BDD would be on top of my list.</p>

<p>Having tested code doesn’t neccesary equal clean code.</p>

<p>I value <strong>Readability</strong> keeping code <strong>DRY</strong> much more important. I can work on a project without tests, but working on a code that’s not readable or was written by copy-paste monkey is going to be dreadful experience.</p>

<p>There are many ways in which one can improve Readability and DRY’ness of code:</p>

<ul>
<li><a href="http://www.merowing.info/2014/03/refactoring-tricks/#.U_bvl1jV6cc">smart refactoring</a>.</li>
<li>using <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">self-resolving architecture</a>.</li>
<li>using <a href="http://www.objc.io/issue-13/behaviors.html">behaviours</a>.</li>
<li><a href="https://www.google.com/?q=improving+readability+of+code">many more</a>.</li>
</ul>


<p>I’d like to share few techniques I’ve been using to simplify code.</p>

<blockquote><p>Before we start looking at examples, be aware that pretty much ANY code technique can be misused, that doesn’t mean you should avoid it altogether.</p></blockquote>

<h3><a href="https://github.com/krzysztofzablocki/KZAsserts">KZAsserts</a></h3>

<p>Asserts are great for adhearing to first part of the equation, they’ll crash your app, but they are usually stripped in release(they should), so we need to have proper error handling in release code.</p>

<p>Naive code would look like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="n">MyerrorDomain</span> <span class="nl">code:</span><span class="n">FSProfileParsingFailedError</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="nl">NSLocalizedDescriptionKey:</span> <span class="s">&quot;[dataFromServer isKindOfClass:[NSDictionary class]] failed&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="n">MyerrorDomain</span> <span class="nl">code:</span><span class="n">FSProfileParsingFailedError</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{</span><span class="nl">NSLocalizedDescriptionKey:</span> <span class="s">&quot;[something isKindOfClass:[NSString class]] failed&quot;</span><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>There is a lot of duplication here, that&#8217;s probably a reason why few people use assertions (I’d rather gauge my eyeballs out than write/read this kind of code).</p>

<p>So how could we achive all of the above (and more), but keep code simple and easy to read?</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AssertTrueOrReturnError</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="n">AssertTrueOrReturnError</span><span class="p">([</span><span class="n">something</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]]);</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Preprocesor Macros</h2>

<p>Contrary to Apple beliefs (Swift language doc), macros are used for much more than constants (using them for constants is plain wrong).</p>

<h4>What are common techniques for leveraging macros ?</h4>

<p>Given a macro definition:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define Macro(param)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>and a call like</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Macro</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>We can:</p>

<ol>
<li>Generate NSString - <code>@#param</code> turns into <code>@"name"</code></li>
<li>Generate unique variable definition by joing symbols - <code>NSString *local_##param = #@param;</code> turns into <code>NSString *local_name = @"name";</code></li>
<li>Leverage gcc expression extension for multiple statements with return value - <code>({ result = doSomething(param); result; })</code> can be used as part of other expressions <code>[Macro(name) doSomethingElse]</code></li>
<li>Enforce compile time errors and prevent making spelling mistake when using keyPaths/properties - <code>({if(NO){ [self param]; }; #@param;})</code> can be used as <code>keyPath(name)</code> to get keyPath for a property that you can NEVER make a mistake with (because it will throw compile error if an object doesn’t have property called name).</li>
</ol>


<p>Techniques like this were crucial for my <a href="https://github.com/krzysztofzablocki/KZPropertyMapper">KZPropertyMapper</a> DSL, let’s look at other techniques used there.</p>

<p>Example property mapping might look like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">title</span><span class="p">).</span><span class="n">lengthRange</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">type</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>      <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">uniqueID</span><span class="p">),</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>This little piece of code does a lot of things:</p>

<ul>
<li>Handle NSNull’s in source data</li>
<li>Gracefully handle optional params</li>
<li>Executes type conversions eg. string to URL</li>
<li>Executes specified validations</li>
<li>Generates compile time error if you make mistake in property name</li>
<li>Looks awesome, just look at those validators, so clear and readable.</li>
</ul>


<p>I’d say that’s quite a lot of bang for a buck. <strong>How can it do it</strong>?</p>

<ol>
<li>Macro’s</li>
<li>Chainable DSL for validators</li>
<li>Key Value Coding</li>
<li>Runtime</li>
</ol>


<p>Macro’s we already discussed, KZBox/KZProperty are macros that use above techniques.</p>

<h2>DSL for validators.</h2>

<p>I bet you appreciate how readable and easy to use validators are. Imagine them written as standard objc method calls, it wouldn’t be as easy to write or read.
Instead of nice</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">startsWith</span><span class="p">(</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Even if I used same smart technqiues for chaining I’d still have lots of <code>[]</code> symbols, likes of:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="p">[[[</span><span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">)</span> <span class="n">isRequired</span><span class="p">]</span> <span class="nl">min:</span><span class="mi">10</span><span class="p">]</span> <span class="nl">startsWith:</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>This code is not as easy to change, if you wanted to remove or add validation you need to jump between end and start of the definition. Not to mention one can only take so many <code>[]</code>.</p>

<p>We can achieve simple and chainable DSL like the above one by leveraging <em>properties</em> along with <em>blocks</em>:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">KZPropertyDescriptor</span> <span class="o">*</span><span class="p">(</span><span class="o">^</span><span class="n">length</span><span class="p">)(</span><span class="n">NSInteger</span> <span class="n">length</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>then by calling</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">contentURL</span><span class="p">).</span><span class="n">isRequired</span><span class="p">().</span><span class="n">min</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">startsWith</span><span class="p">(</span><span class="s">@&quot;http://myapi.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>What we are actually doing is accessing some block properties and executing them, but how are those block set ?</p>

<p>Very simply:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">KZPropertyDescriptor</span> <span class="o">*</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSUInteger</span> <span class="n">length</span><span class="p">))</span><span class="nf">length</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">addValidatorWithName:</span><span class="s">@&quot;length&quot;</span> <span class="nl">validation:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">number</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>return a block that matches our property definition</li>
<li>when that block is executed we add a new validator with a 1-liner validation block</li>
<li>our block returns self so that we can chain another validator on top of it.</li>
</ol>


<p><a href="https://github.com/krzysztofzablocki/KZPropertyMapper/blob/master/KZPropertyMapper/KZPropertyDescriptor%2BValidators.m">Just take a look at other validators here</a>.</p>

<h2>Key Value Coding</h2>

<p>Key value coding is really cool technique that I use in normal code but also very often while debugging.</p>

<p>KVC allows us to leverage:</p>

<ul>
<li>automatic boxing / unboxing of primitive types (eg. change int into NSNumber and viceversa)</li>
<li>collection operators like <strong>sum/avg/max</strong></li>
<li>more complex operators like <strong>unionOfObjects</strong></li>
<li>extract only interesting attributes</li>
<li><strong>ALL of the above can be applied on subobjects</strong></li>
</ul>


<p>Examples:</p>

<p>Instead of:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">before:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">charts</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="n">CGFLOAT_MIN</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">HRBBarGraphChartDescriptor</span> <span class="o">*</span><span class="n">chart</span> <span class="k">in</span> <span class="n">charts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">maxValue</span> <span class="o">=</span> <span class="n">fmaxf</span><span class="p">(</span><span class="n">chart</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">floatValue</span><span class="p">,</span> <span class="n">maxValue</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">maxValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>We do:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">after:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">charts</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">charts</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;@max.value&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Unique elements from a sub-collection? Instead of:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! We could use set operations here, but it&#39;s just trading speed with memory usage</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSFastEnumeration</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">uniqueElementsBefore</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">allElements</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">ShapeGroup</span> <span class="o">*</span><span class="n">group</span> <span class="k">in</span> <span class="n">_shapeGroups</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">CCSprite</span> <span class="o">*</span><span class="n">element</span> <span class="k">in</span> <span class="n">group</span><span class="p">.</span><span class="n">elements</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">allElements</span> <span class="nl">containsObject:</span> <span class="n">element</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">allElements</span> <span class="nl">addObject:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">allElements</span> <span class="n">copy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Simple:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSFastEnumeration</span><span class="o">&gt;</span><span class="p">)</span><span class="n">uniqueElementsAfter</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">_shapeGroups</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;@distinctUnionOfArrays.elements&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>When working with debugger I often want to query some collections for interesting properties, eg. I only want names of Users from coredata object.</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">po</span> <span class="p">[[</span><span class="n">website</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;users.name&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>KZPM mostly uses KVC ability to box / unbox properties:
Collection will only contain NSNumbers, but if your class uses NSInteger or other primitives you can get that conversion for free:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setValue:</span><span class="err">@</span><span class="mi">2</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;primitiveNSInteger&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Runtime</h2>

<p>Meta programming is one of my beloved techniques, I just hate repetition, DRY all the way.</p>

<p>Smart runtime usage can give us a lot of power, I wrote about them extensively before:</p>

<ul>
<li>Dynamically create / override functions and classes:

<ul>
<li>Automatically pick up classes implementing specific protocol. <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">I wrote about this here</a></li>
<li>Intercept methods to log or modify behavior eg. <a href="https://github.com/steipete/Aspects">Aspects</a>.</li>
<li>Implement similar functions without repetition:

<ul>
<li>eg. implementing ActiveRecord style <strong>findByField</strong> would only require a few lines of code for all properties of an object.</li>
</ul>
</li>
<li>Store context data per instance.</li>
<li>Resolve methods/classes dynamically. <a href="http://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/">Read here</a></li>
</ul>
</li>
<li>Adding guards around Apple API&#8217;s misuses:

<ul>
<li><a href="https://gist.github.com/steipete/5664345">accessing UIKit methods from background threads</a></li>
<li><a href="https://gist.github.com/jverkoey/10641155">accessing CoreData context from wrong thread</a></li>
</ul>
</li>
<li><a href="https://github.com/krzysztofzablocki/CCNode-SFGestureRecognizers">Adding UIGestureRecognizer support to Cocos2D</a></li>
<li>Implement Higher order messaging:
<code>[[windowsArray do] setHidesOnDeactivate:YES];</code></li>
</ul>


<h3>Wrapping up</h3>

<p>There are many techniques to keep your code clean and DRY, I hope you find some of the above useful and if you have other favorites ones <a href="http://twitter.com/merowing_">send me a tweet</a> as I’d love to hear about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving development speed]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/07/improving-development-speed"/>
    <updated>2014-07-18T20:45:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/07/improving-development-speed</id>
    <content type="html"><![CDATA[<p>I wrote a blogpost about improving iteration speed and why code injection is awesome when you work on small changes.
<a href="http://www.lextech.com/2014/07/3-big-ways-to-speed-up-your-development-cycle/">Read it on Lextech blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Observable in Swift]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/07/implementing-observable-in-swift"/>
    <updated>2014-07-17T14:56:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/07/implementing-observable-in-swift</id>
    <content type="html"><![CDATA[<p>Use it or not, KVO has been integral part of Cocoa programming, yet if you decide to use only native Swift code you are loosing ability to observe other object properties.</p>

<p>There is a way to add Observable properties back to your own codebase with generics in a way they won’t have ripple effect on remaining code, it’s actually pretty cool.</p>

<!-- more -->


<h2>API Design</h2>

<p>When I thought of how I want to implement Observable properties, I’ve had few things in mind:</p>

<ol>
<li>Distinct closures for Will/Did set.</li>
<li>Ability to access current value and old/new one.</li>
<li>Observable property should work as non-observable one, if function takes int as argument it should work with both cases.</li>
</ol>


<p>1 and 2 can be satisfied with just API design, sample code for usage of Observable looks like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">object</span><span class="p">.</span><span class="n">property</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(.</span><span class="n">WillSet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Will set value to \($0) curValue \($1)”)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>What I meant by point 3 is best explained with some sample code. Let’s say we have a class Foo in our Library/Module:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">rawInt</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">observableInt</span> <span class="o">=</span> <span class="n">Observable</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Let’s say user of our library has a function that processes ints:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">processInt</span><span class="p">(</span><span class="n">value</span> <span class="o">:</span> <span class="n">Int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p></p>

<p>Now I want the users of my module to be able to just use my code, regardless of it beining observable or not:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">object</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span><span class='line'><span class="n">processInt</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">rawInt</span><span class="p">)</span>
</span><span class='line'><span class="n">processInt</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">observableInt</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Having a code like this would mean that you as an user of my code doesn’t need to care if it’s observable or not, yet you could leverage that power if you needed/wanted.</p>

<h2>Swift Types and Implict conversions</h2>

<p>Implementing compliance with above requirement (3rd) wouldn’t be  possible in Swift because of Type difference if not for a little known function called <strong>__conversion()</strong>, conversion as the name clearly states gives you implicit conversion between types, this is how we can use it for our Observable properties:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">raw</span> <span class="o">:</span> <span class="n">T</span>
</span><span class='line'><span class="c1">// other code...</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">__conversion</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">raw</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now each time a parameter of T is required, we can use Observable<T> instead.</p>

<h2>Swift issues and Wish-list</h2>

<p>When I was playing with the idea of Observables I’ve found few things that either crashed the compiler (<em>Ouch</em>) or just didn’t work in language (yet?).</p>

<p>Issues:</p>

<ul>
<li>Putting enum declaration in a generic Struct will kill your Xcode -> that’s why ObservingType is separate enum.</li>
<li>Working with compound collections (Hash of Arrays) has some really weird behaviours:

<ul>
<li>don’t try using mapping with observingInfo or compiler crashes -> thus let instead of simple map</li>
<li>Can’t do inline manipulation of Arrays in hash -> needed  to overwrite whole array object in a hash</li>
</ul>
</li>
</ul>


<p>Wish list:</p>

<ol>
<li>Would be nice to have a way to define behaviour/mutability for compound collections</li>
<li>Ability to create extensions from a generic scope or overload assigment = operator, right now to be able to modify Observable<T> we need to use rawValue accessor which is far from perfect.</li>
</ol>


<p>Hopefully Apple is working on at least some of those points.</p>

<p><a href="https://github.com/krzysztofzablocki/Swift-Observable">Full playground is available here</a></p>

<p>If you’d like to chat <a href="http://twitter.com/merowing_">send me a tweet</a> or even better send me some PR’s :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behaviours and Xcode 6]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/06/behaviours-and-xcode-6"/>
    <updated>2014-06-22T16:46:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/06/behaviours-and-xcode-6</id>
    <content type="html"><![CDATA[<p><a href="http://www.objc.io/issue-13/behaviors.html">I wrote about Behaviours in newest issue of objc.io Architecture series</a>.</p>

<p>Xcode 6 brought some great improvements to interface builder, one of the coolest one is ability to design custom views, even cooler is the fact that few people realised - IBInspectable works on ANY object, this makes my Behaviours even better!</p>

<!-- more -->


<h1>Behaviours</h1>

<p>My behaviours are built on top of 3 principles:</p>

<ol>
<li>Use of runtime attributes for setting properties</li>
<li>Reversing lifetime notation</li>
<li>Generating events</li>
</ol>


<p>Both 2. and 3. were easy to use since they were powered by visual binding, it was only a matter of connecting proper outlets/actions.</p>

<p>Using runtime attributes was far from ideal:
1. Error prone - since you need to enter keyPath correctly, spelling mistakes will lead to crash when deserialising Xib/Storyboard which gets annoying.
2. Need to read documentation / header to know what keyPaths are supported.</p>

<h1>Enter Xcode 6</h1>

<p>With introduction of Xcode 6 we’ve received live rendering of custom views (finally!?), to support custom views rendering you need to:
1. Put your view classes inside a separate framework
2. Specify IBDesignable attribute for your class interface
3. For each configurable custom property you should specify IBInspectable attribute</p>

<p>If we add few IBInspectables like so:</p>

<p><img src="http://merowing.info/uploads/2014/06/inspectable_code.png"></p>

<p>Interface builder will now generate WYSIWYG editors for them:</p>

<p><img src="http://merowing.info/uploads/2014/06/inspectable_ib.png"></p>

<p>This is great improvement to workflow, especially if you look at how many different types of properties receive their own editors:
- boolean
- number
- string
- rectangle
- point
- size
- color
- range
- image</p>

<p>This is great improvement to workflow, especially when I work with designers, I no longer need them to read docs for each custom view we have in app, they can just use visual editor 100% of time!</p>

<h1>How does that help with Behaviours?</h1>

<p>Very few people realised that IBInspectable can work without IBDesignable, and it get’s better:</p>

<blockquote><p>IBInspectable works without needing frameworks, on any class.</p></blockquote>

<p>That means that each Behaviour property can be made IBInspectable and you get all the benefits of WYSIWYG editor for no cost, how great is that?</p>

<p>Finally my Parallax behaviour get a nice visual editor:</p>

<p><img src="http://merowing.info/uploads/2014/06/Inspectables.png"></p>

<h1>Supporting older Xcode?</h1>

<p>Xcode 6 is still beta and so are inspectables, fortunately for us Apple did great job of joining Runtime attributes and inspectables together:</p>

<blockquote><p>If you have runtime attribute set for a specific keyPath that’s also IBInspectable property, it will show up as the value of that Inspectable</p></blockquote>

<p>To be able to compile your IBInspectable enabled Behaviours on older Xcode 5 you just need to add empty macro for IBInspectable, like so:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#ifndef IBInspectable</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">IBInspectable</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>All behaviours will now work as expected, you can use runtime attributes in Xcode 5 or Inspectable’s in Xcode 6.</p>

<p><a href="https://github.com/krzysztofzablocki/BehavioursExample">Grab example code from GitHub.</a></p>

<p>If you’d like to chat about Behaviours or anything else, <a href="http://twitter.com/merowing_">send me a tweet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Image Comparison View]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/05/implementing-image-comparison-view-in-20-minutes"/>
    <updated>2014-05-20T11:21:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/05/implementing-image-comparison-view-in-20-minutes</id>
    <content type="html"><![CDATA[<p>Did you ever see image split available in Kaleidoscope? It&#8217;s really easy to implement similar one in iOS with some CoreAnimation code.</p>

<p><img src="http://www.merowing.info/uploads/2014/05/ImageSplit.gif" width="180" height="270"></p>

<!-- more -->


<h1>Basic</h1>

<ol>
<li>Stack 2 UIImageViews on top of each other.</li>
<li>Use CAShapeLayer to generate mask to hide part of our top one.</li>
<li>Mask will be a simple triangle that changes it&#8217;s extents as we move our finger.</li>
</ol>


<p><img src="http://www.merowing.info/uploads/2014/05/layersMasked.png" width="160">
<img src="http://www.merowing.info/uploads/2014/05/mask.png" width="160"></p>

<p>We only need to create a simple triangle that conveys that.
To be able to reduce or increase mask size we need to manipulate topLeft and bottomRight vertices of that triangle.
We just need to move them proportionally to our width/height ratio like so:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGPathRef</span><span class="p">)</span><span class="nf">pathForMaskingUpToPercentage:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">percentage</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">width</span> <span class="o">=</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="n">CGRectGetHeight</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">min</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">offset</span> <span class="o">=</span> <span class="o">-</span><span class="n">min</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">min</span> <span class="o">*</span> <span class="n">percentage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 3.</span>
</span><span class='line'>  <span class="n">UIBezierPath</span> <span class="o">*</span><span class="n">bezierPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="n">bezierPath</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bezierPath</span> <span class="nl">moveToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">height</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bezierPath</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">offset</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bezierPath</span> <span class="nl">addLineToPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">offset</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">,</span> <span class="n">height</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bezierPath</span> <span class="n">closePath</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">bezierPath</span><span class="p">.</span><span class="n">CGPath</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>Calculate screen ratio</li>
<li>Grab min which equals to turned-off masking.</li>
<li>Expand triangle by using offset and adjusting for screen ratio.</li>
</ol>


<h1>Driving UIX by GestureRecognizer</h1>

<p>We want to be able to drive our masking by using simple pan gesture recognizer, we can implement it as follows:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handlePanGesture:</span><span class="p">(</span><span class="n">UIPanGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGPoint</span> <span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">gestureRecognizer</span> <span class="nl">locationInView:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">width</span> <span class="o">=</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="n">CGRectGetHeight</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">sqrtf</span><span class="p">((</span><span class="kt">float</span><span class="p">)(</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pow</span><span class="p">((</span><span class="n">height</span> <span class="o">-</span> <span class="n">location</span><span class="p">.</span><span class="n">y</span><span class="p">),</span> <span class="mi">2</span><span class="p">)));</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">maxDistance</span> <span class="o">=</span> <span class="n">sqrtf</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">height</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 3.</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">fraction</span> <span class="o">=</span> <span class="n">distance</span> <span class="o">/</span> <span class="n">maxDistance</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGPathRef</span> <span class="n">newPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">pathForMaskingUpToPercentage:</span><span class="n">fraction</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">shapeLayer</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">newPath</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>Just grab values for calculation.</li>
<li>Use simple vector math to calculate max allowed distance and the distance to user finger.</li>
<li>Calculate how far in normalized distance user finger is, then grab a mask for that percentage and set it on shapeLayer.</li>
</ol>


<h1>Adding snapping behaviour</h1>

<p>It would be nice if when we lifted finger close to screen boundries our mask would snap with animation, we can add that by simply using CoreAnimation and simple math:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'><span class="k">const</span> <span class="kt">BOOL</span> <span class="n">isEnding</span> <span class="o">=</span> <span class="n">gestureRecognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateEnded</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGFloat</span> <span class="n">snapMargin</span> <span class="o">=</span> <span class="n">kPathSnapMarginPercentage</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isEnding</span> <span class="o">&amp;&amp;</span> <span class="n">fraction</span> <span class="o">&gt;</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">snapMargin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fraction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isEnding</span> <span class="o">&amp;&amp;</span> <span class="n">fraction</span> <span class="o">&lt;</span> <span class="n">snapMargin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fraction</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">CGPathRef</span> <span class="n">newPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">pathForMaskingUpToPercentage:</span><span class="n">fraction</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isEnding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">pathAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;path&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//! 3.</span>
</span><span class='line'>    <span class="n">pathAnimation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">shapeLayer</span><span class="p">.</span><span class="n">path</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pathAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">newPath</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pathAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="n">kPathSnappingDuration</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pathAnimation</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseInEaseOut</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">shapeLayer</span> <span class="nl">addAnimation:</span><span class="n">pathAnimation</span> <span class="nl">forKey:</span><span class="s">@&quot;path&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//! 4.</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">shapeLayer</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">newPath</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>Verify that user lifted their finger.</li>
<li>Add simple path animation to our shape layer.</li>
<li>Remember to set fromValue as we will be changing model layer after this animation block, otherwise you&#8217;d have a difference between model and presentation layers.</li>
<li>Update model layer.</li>
</ol>


<p><a href="http://www.merowing.info/2012/07/pinch-to-reveal-animation-like-in-boeing-milestones/">For more masking examples check-out my old article about Pinch to Reveal effect</a></p>

<p><a href="https://github.com/krzysztofzablocki/KZImageSplitView">Full source code at GitHub</a></p>

<p><a href="http://twitter.com/merowing_">Send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subjective guide to writing iOS Apps - Part 2 Data Parsing]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing"/>
    <updated>2014-04-03T19:36:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing</id>
    <content type="html"><![CDATA[<p>When it comes to architecture choices, the model layer is very important, flexible data parsing will allow us to add new types of objects easily, so making a mistake in this part of our app might lead to serious problems in the future.</p>

<p>Let&#8217;s look at how we could create a simple yet flexible architecture for our model layer.</p>

<!-- more -->


<h2>Design</h2>

<p>What I like to do is create a modular architecture, one in which I can add new types of objects without modifying the core of the app, that way I can expand the application without much fuss.</p>

<p>Since UI will come later in this series, I&#8217;ll write this part using tests.</p>

<h3>Choices</h3>

<p>Let&#8217;s start with a few choices before we design the architecture:</p>

<ul>
<li><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">KZPropertyMapper</a> for data mapping - because it&#8217;s simple.</li>
<li>CoreData for data persistence - because it&#8217;s a very common need/choice in commercial apps.</li>
<li><a href="https://github.com/rentzsch/mogenerator">mogenerator</a> - as it&#8217;s useful for creating human / machine files</li>
<li><a href="https://github.com/magicalpanda/MagicalRecord">Magical Record</a> - since we already know CoreData let&#8217;s use a popular wrapper to help us out.</li>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> - a very popular library that I&#8217;ll use for fetching data.</li>
<li><a href="https://github.com/AliSoftware/OHHTTPStubs">OHHTTPStubs</a> - this is not backend tutorial, so we&#8217;ll stub server responses.</li>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a> for tests -my favorite.</li>
</ul>


<p>I&#8217;m not a huge fan of CoreData, but It gives me a nice way to have separation of concern.
When I use a Fetched Results Controller my UI can be automatically updated and I end up having something like this:</p>

<p><img src="http://merowing.info/uploads/2014/04/Flow.png" width="400" height="57"></p>

<p>In this article I&#8217;ll talk about the data path.
<a href="https://github.com/krzysztofzablocki/KZBootstrap">Grab source code from GitHub</a></p>

<h2>Implementation</h2>

<p>First I start by setting up a project with <a href="https://github.com/krzysztofzablocki/crafter">crafter</a></p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. KZBootstrap
</span><span class='line'>2. KZBootstrapTests
</span><span class='line'>Which target should I use for default?
</span><span class='line'>1
</span><span class='line'>1. KZBootstrap
</span><span class='line'>2. KZBootstrapTests
</span><span class='line'>Which target should I use for tests?
</span><span class='line'>2
</span><span class='line'>do you want to add networking? [y/n]
</span><span class='line'>y
</span><span class='line'>do you want to add coredata? [y/n]
</span><span class='line'>y
</span><span class='line'>do you want to add kiwi? [y/n]
</span><span class='line'>y
</span><span class='line'>duplicating configurations
</span><span class='line'>setting up variety of options
</span><span class='line'>preparing git ignore
</span><span class='line'>preparing pod file
</span><span class='line'>adding scripts
</span><span class='line'>Finished.</span></code></pre></td></tr></table></div></figure>
</div>


<p>Using <a href="https://github.com/krzysztofzablocki/crafter">crafter</a> I now have all of my preferred libraries and custom warning levels without wasting time doing manual configuration.</p>

<h3>Fetching</h3>

<p>We won&#8217;t be using a real backend server, instead we&#8217;ll use the OHHTTPStubs library to stub network requests and return canned JSON responses. The library also provides us with simulated network speed (How cool is that?).</p>

<p>For this part we can get away with an extra simple DataProvider concept, it just needs to satisfy a few simple requirements:</p>

<ul>
<li>it should allow stubbing fake data for an arbitrary URL (because we don&#8217;t have backend)</li>
<li>it should return operations that can be cancelled</li>
</ul>


<p>We can write tests for these 2 conditions like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;should fetch data from an arbitrary URL&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sut</span> <span class="nl">dataForURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://fake.url&quot;</span><span class="p">]</span> <span class="nl">withSuccessBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">responseData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">success</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">andFailureBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="err">@</span><span class="p">(</span><span class="n">success</span><span class="p">))</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beTrue</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;should return operations that can be canceled&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">executed</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">id</span><span class="o">&lt;</span><span class="n">KZBCancelableOperation</span><span class="o">&gt;</span> <span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">sut</span> <span class="nl">dataForURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://fake.url&quot;</span><span class="p">]</span> <span class="nl">withSuccessBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">responseData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">executed</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">andFailureBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">executed</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">operation</span> <span class="n">cancel</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="err">@</span><span class="p">(</span><span class="n">executed</span><span class="p">))</span> <span class="n">shouldNotEventually</span><span class="p">]</span> <span class="n">beTrue</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>In the first test we only care that it succeeds, in the second test I&#8217;m making sure that the operation can be cancelled.</p>

<p>Now to make the first test pass, we want to stub our network requests by using OHHTTPStubs:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupStubs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="n">removeAllStubs</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapping</span> <span class="nl">enumerateKeysAndObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">urlPath</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">fileName</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">OHHTTPStubs</span> <span class="nl">stubRequestsPassingTest:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">BOOL</span> <span class="n">equal</span> <span class="o">=</span> <span class="p">[</span><span class="n">request</span><span class="p">.</span><span class="n">URL</span><span class="p">.</span><span class="n">absoluteString</span> <span class="nl">isEqualToString:</span><span class="n">urlPath</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">equal</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">withStubResponse:</span><span class="o">^</span><span class="n">OHHTTPStubsResponse</span> <span class="o">*</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">OHHTTPStubsResponse</span> <span class="o">*</span><span class="k">const</span> <span class="n">response</span> <span class="o">=</span> <span class="p">[</span><span class="n">OHHTTPStubsResponse</span> <span class="nl">responseWithFileAtPath:</span><span class="n">OHPathForFileInBundle</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span> <span class="nl">statusCode:</span><span class="mi">200</span> <span class="nl">headers:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;Content-Type&quot;</span> <span class="o">:</span> <span class="s">@&quot;text/json&quot;</span><span class="p">}];</span>
</span><span class='line'>      <span class="n">response</span><span class="p">.</span><span class="n">responseTime</span> <span class="o">=</span> <span class="n">OHHTTPStubsDownloadSpeed3G</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here I setup all the stubbed network responses by using a mapping dictionary in form URLPath : FileName.</p>

<p>I also setup the stub to simulate the speed of a 3G connection since I want real async tests as we don&#8217;t currently have a real UI</p>

<p>(In most cases you want to make tests run as fast as possible so that whole test-suite takes the minimum amount of time, since you&#8217;ll be running them very often).</p>

<p>Implementing dataForURL is easy enough:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">KZBCancelableOperation</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">dataForURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span> <span class="nf">withSuccessBlock:</span><span class="p">(</span><span class="n">KZBSuccessBlock</span><span class="p">)</span><span class="nv">successBlock</span> <span class="nf">andFailureBlock:</span><span class="p">(</span><span class="n">KZBFailureBlock</span><span class="p">)</span><span class="nv">failureBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">requestOperation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPRequestOperationManager</span> <span class="n">manager</span><span class="p">]</span> <span class="nl">GET:</span><span class="n">url</span><span class="p">.</span><span class="n">absoluteString</span> <span class="nl">parameters:</span><span class="nb">nil</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">successBlock</span><span class="p">(</span><span class="n">responseObject</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">AFHTTPRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">operation</span><span class="p">.</span><span class="n">isCancelled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">failureBlock</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>  <span class="n">NSAssert</span><span class="p">([</span><span class="n">requestOperation</span> <span class="nl">respondsToSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancel</span><span class="p">)],</span> <span class="s">@&quot;Returned operation doesn&#39;t support KZBCancelableOperation protocol&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">requestOperation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here I am using AFNetworking to do a simple fetch.</p>

<ul>
<li>I don&#8217;t want a cancelled action to callback my completion blocks so I ignore cancelled operations with a guard clause.</li>
<li>I want to make sure requestOperation supports canceling.</li>
<li>Since I don&#8217;t have any value in exposing AFNetworking internal classes to my code I&#8217;ll be using my cancelable protocol.</li>
</ul>


<h3>Parsing data</h3>

<p>When it comes to parsing data, I&#8217;d like to make sure this implementation handles a few requirements:</p>

<ol>
<li>Easy to modify source format, if I need to change from JSON to something else, then that shouldn&#8217;t be a massive endeavor.</li>
<li>I&#8217;d like to be able to add new types of objects without modifying the parsing core. Ideally I would just add a class and have it working.</li>
<li>Parsing should be very simple, preferably with little-to-no code.</li>
</ol>


<p>Let&#8217;s look how we can create a design that will take care of all of these requirements:</p>

<h4>Source format</h4>

<p>This requirement is very simple to satisfy since we&#8217;ll be using KZPropertyMapper for mapping.</p>

<p>It doesn&#8217;t rely on JSON/XML or any other format. It uses native data structures, so the only thing we need to make sure of is that our parser converts the source format into native types before passing the data to KZPropertyMapper.</p>

<h4>Supporting new classes</h4>

<p>This is the requirement that affects the design of this architecture the most.</p>

<p>I want to drop-in a new class to the project, and <em>&#8216;somehow&#8217;</em> have it picked up by the parser and handled.</p>

<h5>Protocol</h5>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">KZBParsableObjectProtocol</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">@</span><span class="n">required</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">serverType</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">serverIDPropertyName</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateFromDictionary:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dictionary</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here we decide on 3 main features:</p>

<ol>
<li>We can define our own mapping for serverTypes, doing ORM with 1:1 naming is usually ugly, especially if you have to support multiple platforms.</li>
<li>We select which property will be used for mapping serverTypes.</li>
<li>Each object knows how to update itself from an NSDictionary*. In proper projects this might be a good place to return an error at the core parsing level, especially since KZPropertyMapper can generate validation errors for you.</li>
</ol>


<p>It&#8217;s a nice simple protocol, but it doesn&#8217;t help us automatically support any new classes.</p>

<h5>Finding parsable classes</h5>

<p>It&#8217;s actually quite simple to use the Obj-C runtime to get a list of all classes that conform to our protocol.</p>

<p>Let&#8217;s start with being able to find classes conforming to an arbitrary protocol:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should be able to find classes conforming to specific protocol&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[[</span><span class="n">KZBParsingHelper</span> <span class="nl">findClassesConformingToProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">KZBParsableObjectProtocol</span><span class="p">)]</span> <span class="n">should</span><span class="p">]</span> <span class="nl">equal:</span><span class="err">@</span><span class="p">[</span><span class="n">KZBTestParsableClass</span><span class="p">.</span><span class="n">class</span><span class="p">]];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>In order to make this simple test pass, we need to get our hands a little bit dirty and use the straight C API of the Obj-C runtime.</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">findClassesConformingToProtocol:</span><span class="p">(</span><span class="n">Protocol</span> <span class="o">*</span><span class="p">)</span><span class="nv">protocol</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">numberOfClasses</span> <span class="o">=</span> <span class="n">objc_getClassList</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Class</span> <span class="o">*</span><span class="n">classes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 2</span>
</span><span class='line'>  <span class="n">classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">Class</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span> <span class="o">*</span> <span class="n">numberOfClasses</span><span class="p">);</span>
</span><span class='line'>  <span class="n">objc_getClassList</span><span class="p">(</span><span class="n">classes</span><span class="p">,</span> <span class="n">numberOfClasses</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">conformingClasses</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numberOfClasses</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">lClass</span> <span class="o">=</span> <span class="n">classes</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="c1">//! 3</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">class_conformsToProtocol</span><span class="p">(</span><span class="n">lClass</span><span class="p">,</span> <span class="n">protocol</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">conformingClasses</span> <span class="nl">addObject:</span><span class="n">classes</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">classes</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">conformingClasses</span> <span class="n">copy</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>What happens here?</p>

<ol>
<li>First we need to establish the total number of classes in our application, so that we can allocate enough memory to hold them all.</li>
<li>We allocate memory for our classes array and then ask the runtime to fill this allocated memory with the classes.</li>
<li>While we are enumerating over all classes we need to use</li>
</ol>


<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class_conformsToProtocol</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Instead of NSObject:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">class</span> <span class="nl">conformsToProtocol:</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>This is because <strong>not all</strong> classes have to inherit from NSObject or implement the NSObject Protocol and that method will fail.</p>

<p>Next we&#8217;d like to be able to grab a class corresponding to a specific serverType value:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;should be able to query class for a serverType&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[[[</span><span class="n">KZBParsingHelper</span> <span class="nl">findClassesConformingToProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">KZBParsableObjectProtocol</span><span class="p">)]</span> <span class="n">should</span><span class="p">]</span> <span class="nl">contain:</span><span class="n">KZBTestParsableClass</span><span class="p">.</span><span class="n">class</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now querying all the classes every time someone asks for a serverType would be <em>very wasteful and not very smart</em>.</p>

<p>Let&#8217;s generate a serverType - class mapping only once when the KZBParsingHelper is first used:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">setupServerTypeToClassMapping</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupServerTypeToClassMapping</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">classMapping</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">Class</span> <span class="n">lClass</span> <span class="k">in</span> <span class="p">[</span><span class="n">self</span> <span class="nl">findClassesConformingToProtocol:</span><span class="err">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">KZBParsableObjectProtocol</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">classMapping</span><span class="p">[[(</span><span class="kt">id</span><span class="p">)</span><span class="n">lClass</span> <span class="n">serverType</span><span class="p">]]</span> <span class="o">=</span> <span class="n">lClass</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="c1">//! 3.</span>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span><span class="k">const</span> <span class="n">serverTypes</span> <span class="o">=</span> <span class="n">classMapping</span><span class="p">.</span><span class="n">allValues</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSAssert</span><span class="p">([</span><span class="n">serverTypes</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="p">[[</span><span class="n">serverTypes</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;@distinctUnionOfObjects.self&quot;</span><span class="p">]</span> <span class="n">count</span><span class="p">],</span> <span class="s">@&quot;serverType collision, there shouldn&#39;t be 2 classes using same serverType %@&quot;</span><span class="p">,</span> <span class="n">classMapping</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 4.</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">serverTypeToClassMappingKey</span><span class="p">,</span> <span class="n">classMapping</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="nf">classForServerType:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 5.</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">serverTypeToClassMappingKey</span><span class="p">)</span> <span class="nl">objectForKey:</span><span class="n">serverType</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Let&#8217;s elaborate:</p>

<ol>
<li>initialize is called when the class is first referenced, so when you first try to use any of the methods available in KZBParsingHelper it will execute.</li>
<li>Create a simple mapping between a serverType and the class that can map it.</li>
<li>Make sure that there aren&#8217;t any duplicate serverTypes, since that would be programmer mistake.</li>
<li>Use associated objects to store the mappings against the class.</li>
<li>Use associated objects to retrieve a mapping from the class.</li>
</ol>


<h5>Parser</h5>

<p>Let&#8217;s define a simple DataParser protocol:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">KZBParserProtocol</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">parseData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span> <span class="nl">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">parsingInfo</span><span class="p">))</span><span class="n">completionBlock</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>I don&#8217;t see a need to define data types at this level, I&#8217;d rather accept raw data and have the specific parser know how to handle it.</li>
<li>Even if you wanted to do the parsing synchronously (really?) I believe this should still be designed as an async interface.</li>
<li>Completion is called with error and parsingInfo, parsingInfo might be useful for specific parsers.</li>
</ol>


<h5>JSON Parser &amp; CoreData</h5>

<p>Let&#8217;s implement a base JSON parser that can work with CoreData, this will be a base class for implementing format specific JSON parsers later on.</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">KZBJSONParser</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">KZBParserProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">processBody:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">jsonBody</span> <span class="nl">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="n">localContext</span> <span class="nl">completion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="n">completionBlock</span> <span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here we are adding one new method, subclasses can use it to define format specific parsing logic.</p>

<p>The implementation looks like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">KZBJSONParser</span>
</span><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">parseData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">jsonData</span> <span class="nf">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">completionBlock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">deserializeJSONData:</span><span class="n">jsonData</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">obj</span> <span class="o">&amp;&amp;</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">__block</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">parserInfo</span><span class="p">;</span>
</span><span class='line'><span class="c1">//! 3.</span>
</span><span class='line'>  <span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">saveWithBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">localContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">processBody:</span><span class="n">obj</span>
</span><span class='line'>          <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">aError</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">aParserInfo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span> <span class="o">=</span> <span class="n">aError</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parserInfo</span> <span class="o">=</span> <span class="n">aParserInfo</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="nl">inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">aError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span> <span class="o">&amp;&amp;</span> <span class="n">aError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">error</span> <span class="o">=</span> <span class="n">pixle_NSErrorMake</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Saving to CoreData failed with error %@&quot;</span><span class="p">,</span> <span class="n">aError</span><span class="p">],</span> <span class="n">kErrorCodeInternal</span><span class="p">,</span> <span class="n">aError</span> <span class="o">?</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;parseError&quot;</span> <span class="o">:</span> <span class="n">aError</span><span class="p">}</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="n">parserInfo</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 4.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processBody:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">jsonBody</span> <span class="nf">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionBlock</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">localContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Helpers</span>
</span><span class='line'><span class="c1">//! 5.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">deserializeJSONData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSError</span> <span class="o">*</span><span class="n">ourError</span> <span class="o">=</span> <span class="n">pixle_NSErrorMake</span><span class="p">(</span><span class="s">@&quot;JSON data is nil&quot;</span><span class="p">,</span> <span class="n">kErrorCodeInternal</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>      <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">ourError</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">data</span> <span class="nl">options:</span><span class="p">(</span><span class="n">NSJSONReadingOptions</span><span class="p">)</span><span class="mi">0</span> <span class="nl">error:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>Concrete implementation of the base method from the Parser protocol.</li>
<li><strong>Parsing is an expensive operation</strong> and I&#8217;d like to enforce no-one calls it without caring about the results.</li>
<li>Our JSON processing will happen on the CoreData context thread, and we&#8217;ll pass in the localContext as I prefer to be explicit when working with context objects.</li>
<li>Stub method for subclasses.</li>
<li>Helper method for deserialising JSON using NSJSONSerialization.</li>
</ol>


<p>Now to be able to progress from here:</p>

<p>We need to know the JSON format coming from our servers.</p>

<p>As nice as REST is, not every client you have to work with have proper REST services, sometimes you might need to handle custom endpoints.</p>

<h3>Server API?</h3>

<p>While I was lead dev at <a href="http://theappbusiness.com">TAB</a> one of our apps had a diff-like API:</p>

<p>We would query an endpoint and we&#8217;d get a response with list of actions to execute on our iOS app.</p>

<p>Let&#8217;s define something similar for our tests:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;actions&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;payload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;serverId&quot;</span> <span class="p">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;serverType&quot;</span> <span class="p">:</span> <span class="s2">&quot;TextWidget&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;My test title&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;payload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;serverId&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;serverType&quot;</span><span class="p">:</span> <span class="s2">&quot;ImageWidget&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://goo.gl/IFSk4C&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}],</span>
</span><span class='line'>    <span class="nt">&quot;nextUrl&quot;</span> <span class="p">:</span> <span class="kc">null</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>We have 2 sections in our response:</p>

<ol>
<li>actions - this is an array of actions to execute in a specific order. Each action has a type and a payload.</li>
<li>nextUrl - the next fetch request should use this url. This way we can drive the whole API flow and only hardcode the &#8216;start&#8217; endpoint in our app.</li>
</ol>


<p>Let&#8217;s implement a JSON Diff parser to handle our custom format, with some space for extensibility later on.</p>

<h4>JSON Diff parser</h4>

<p>The nice thing about our base JSON parser is the fact that we only need to override one method to implement our diff format:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processBody:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">jsonBody</span> <span class="nf">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionBlock</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">localContext</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Let&#8217;s define some simple requirements for our diff parser:</p>

<ul>
<li>should raise an exception for JSON format</li>
<li>should succeed for proper JSON format</li>
<li>should ignore non implemented actions</li>
<li>should create a new object for the add action</li>
</ul>


<p>To satisfy the first 2 requirements we can write tests like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should raise exception for corrupted JSON format&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">theBlock</span><span class="p">(</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">sut</span> <span class="nl">processBody:</span><span class="p">[</span><span class="n">sut</span> <span class="nl">deserializeJSONData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">invalid</span><span class="p">)</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">]</span> <span class="nl">withCompletion:</span><span class="o">^</span>
</span><span class='line'>      <span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">aError</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">}</span> <span class="nl">inContext:</span><span class="p">[</span><span class="n">NSManagedObjectContext</span> <span class="n">MR_context</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">})</span> <span class="n">should</span><span class="p">]</span> <span class="n">raise</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 2.</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should succeed for proper JSON format&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">sut</span> <span class="nl">parseData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">valid</span><span class="p">)</span> <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beYes</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ol>
<li>This test is not perfect as I had to manually deserialise JSON and use processBody instead of the standard method, this is due to having to raise an exception asynchronously, if you know how to write a test that can work with the default method, <a href="http://twitter.com/merowing_">send me a tweet</a>.</li>
<li>We want to get a completion callback and make sure there weren&#8217;t any errors.</li>
</ol>


<p>We can make these 2 tests pass with a simple implementation like:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processBody:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">jsonBody</span> <span class="nf">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionBlock</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">localContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">processBody:</span><span class="n">jsonBody</span> <span class="nl">withCompletion:</span><span class="n">completionBlock</span> <span class="nl">inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">jsonBody</span> <span class="nl">isKindOfClass:</span><span class="n">NSDictionary</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">nextURL</span> <span class="o">=</span> <span class="n">jsonBody</span><span class="p">[</span><span class="s">@&quot;nextUrl&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">((</span><span class="kt">id</span><span class="p">)</span><span class="n">nextURL</span> <span class="o">==</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">]</span> <span class="o">||</span> <span class="p">[</span><span class="n">nextURL</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span><span class="n">actions</span> <span class="o">=</span> <span class="n">jsonBody</span><span class="p">[</span><span class="s">@&quot;actions&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">actions</span> <span class="nl">isKindOfClass:</span><span class="n">NSArray</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">actions</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">action</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">action</span> <span class="nl">isKindOfClass:</span><span class="n">NSDictionary</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">action</span><span class="p">[</span><span class="s">@&quot;type&quot;</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here we assert on expected types using <a href="http://www.merowing.info/2013/07/expanded-use-of-asserts/#.Uz2g1K2Sx1M">my advanced asserts</a>, that way it won&#8217;t crash when compiled for release.</p>

<p><strong>But</strong> this code already looks a little bit crowded, and not that flexible, so let&#8217;s refactor it to prepare for the next steps:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processBody:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">jsonBody</span> <span class="nf">withCompletion:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">))</span><span class="nv">completionBlock</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">localContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">processBody:</span><span class="n">jsonBody</span> <span class="nl">withCompletion:</span><span class="n">completionBlock</span> <span class="nl">inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">jsonBody</span> <span class="nl">isKindOfClass:</span><span class="n">NSDictionary</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="c1">//! 1.</span>
</span><span class='line'>  <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">parsingInfo</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">processSections:</span><span class="n">jsonBody</span> <span class="nl">parsingInfo:</span><span class="n">parsingInfo</span> <span class="nl">inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="n">parsingInfo</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">completionBlock</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">parsingInfo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nf">processSections:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">sections</span> <span class="nf">parsingInfo:</span><span class="p">(</span><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">parsingInfo</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">oError</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sections</span> <span class="nl">enumerateKeysAndObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">section</span><span class="p">,</span> <span class="kt">id</span> <span class="n">sectionData</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">section</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">//! 2.</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">selectorForHandlingSection:</span><span class="n">section</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">DDLogWarn</span><span class="p">(</span><span class="s">@&quot;Ignoring json diff section %@&quot;</span><span class="p">,</span> <span class="n">section</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//! 3.</span>
</span><span class='line'>    <span class="kt">id</span> <span class="p">(</span><span class="o">*</span><span class="n">objc_msgSendTyped</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">,</span> <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">objc_msgSendTyped</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">sectionData</span><span class="p">,</span> <span class="n">parsingInfo</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">oError</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! 4.</span>
</span><span class='line'><span class="cp">#pragma mark - Parsing sections</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nf">processActions:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">actionsArray</span> <span class="nf">parsingInfo:</span><span class="p">(</span><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">parsingInfo</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>  <span class="n">__used</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">oError</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AssertTrueOrReturnError</span><span class="p">([</span><span class="n">actionsArray</span> <span class="nl">isKindOfClass:</span><span class="n">NSArray</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">actionsArray</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">actionData</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">actionData</span> <span class="nl">isKindOfClass:</span><span class="n">NSDictionary</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AssertTrueOrReturnBlock</span><span class="p">([</span><span class="n">actionData</span><span class="p">[</span><span class="s">@&quot;type&quot;</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">selectorForHandlingAction:</span><span class="n">actionData</span><span class="p">[</span><span class="s">@&quot;type&quot;</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">DDLogWarn</span><span class="p">(</span><span class="s">@&quot;Ignoring json diff action %@&quot;</span><span class="p">,</span> <span class="n">actionData</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kt">id</span> <span class="p">(</span><span class="o">*</span><span class="n">objc_msgSendTyped</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">objc_msgSendTyped</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">actionData</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">oError</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nl">processNextUrl:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">nextURL</span> <span class="nl">parsingInfo:</span><span class="p">(</span><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">parsingInfo</span> <span class="nl">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="n">context</span> <span class="n">__used</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnError</span><span class="p">((</span><span class="kt">id</span><span class="p">)</span><span class="n">nextURL</span> <span class="o">==</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">]</span> <span class="o">||</span> <span class="p">[</span><span class="n">nextURL</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Helpers</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nl">selectorForHandlingSection:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NSSelectorFromString</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;process%@:parsingInfo:inContext:&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">section</span> <span class="n">MR_capitalizedFirstCharacterString</span><span class="p">]]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Even though there is more code with extra methods this is easier to read and future-proofed:</p>

<ol>
<li>Parsing all sections is now done in a separate method.</li>
<li>We now have dynamic resolution of section handling, which means we don&#8217;t hardcode supported sections, this can be very useful in the future of the project, when you need to add support for new sections, I&#8217;ll show an example later on.</li>
<li>We use a typed objc_msgSend to call the selector, this is due to the fact that we need to be careful about types when working with ARC and arm64.</li>
<li>The previous code has been refactored into separate methods that are called dynamically, don&#8217;t forget to use <strong>__used</strong> keyword to prevent compiler from thinking this code is dead.</li>
</ol>


<p>We have 2 remaining requirements:</p>

<ol>
<li>should ignore non implemented actions</li>
<li>should create a new object for the add action</li>
</ol>


<p>The <em>1st</em> requirement is tested with same code as the success requirement, only using different JSON file.</p>

<p>The <em>2nd</em> one is more complicated:</p>

<ul>
<li>we need some test classes that use our CoreData model.</li>
<li>we need to make sure our CoreData is set-up correctly for testing.</li>
<li>we need to finish our processActions section handling.</li>
</ul>


<p>Let&#8217;s start with a very basic data model:</p>

<p><img src="http://merowing.info/uploads/2014/04/Model.png" width="344" height="219"></p>

<p>To be able to write tests with CoreData I&#8217;d recommend using beforeEach/afterEach blocks in Kiwi, this is how they look after adding CD memory store:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>     <span class="n">__block</span> <span class="n">KZBJSONDiffParser</span> <span class="o">*</span><span class="n">sut</span><span class="p">;</span>
</span><span class='line'>      <span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">MagicalRecord</span> <span class="n">setupCoreDataStackWithInMemoryStore</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sut</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBJSONDiffParser</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">afterEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">MagicalRecord</span> <span class="n">cleanUp</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should ignore non implemented actions&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__block</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">sut</span> <span class="nl">parseData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">newactions</span><span class="p">)</span> <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">?</span> <span class="err">@</span><span class="n">YES</span> <span class="o">:</span> <span class="err">@</span><span class="n">NO</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beYes</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should create a new object for the add action&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__block</span> <span class="kt">id</span> <span class="n">object</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">sut</span> <span class="nl">parseData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">valid</span><span class="p">)</span> <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBTextWidget</span> <span class="n">MR_findFirst</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beNonNil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now we need to expand our processActions method to actually do something constructive.</p>

<p>Since we added a nice flexible way for dealing with section sections, let&#8217;s replicate that for actions as well:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">selectorForHandlingAction:</span><span class="n">actionData</span><span class="p">[</span><span class="s">@&quot;type&quot;</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">DDLogWarn</span><span class="p">(</span><span class="s">@&quot;Ignoring json diff action %@&quot;</span><span class="p">,</span> <span class="n">actionData</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">id</span> <span class="p">(</span><span class="o">*</span><span class="n">objc_msgSendTyped</span><span class="p">)(</span><span class="kt">id</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">,</span> <span class="kt">id</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">objc_msgSend</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="n">objc_msgSendTyped</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">actionData</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">stop</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oError</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>For the actionAdd itself, you can implement it like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nf">actionAdd:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">action</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="n">__used</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="s">@&quot;payload&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnNil</span><span class="p">([</span><span class="n">action</span> <span class="nl">isKindOfClass:</span><span class="n">NSDictionary</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">serverType</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="s">@&quot;serverType&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnNil</span><span class="p">([</span><span class="n">serverType</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">serverID</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="s">@&quot;serverId&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnNil</span><span class="p">([</span><span class="n">serverID</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSManagedObject</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBParsingHelper</span> <span class="nl">findOrCreateWithServerType:</span><span class="n">serverType</span> <span class="nl">serverID:</span><span class="n">serverID</span> <span class="nl">inContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">obj</span> <span class="nl">updateFromDictionary:</span><span class="n">action</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li>We are only interested in payload at this point.</li>
<li>Asserts to make sure our format is matching expectations</li>
<li>Only soft-errors, if we return an Error from here it will stop the whole parsing, instead I&#8217;d like to ignore incorrect data in this particular case, so I am using Asserts but not returning errors (my asserts already generate and log error info).</li>
<li>findOrCreate object and ask it to update itself from the action dictionary.</li>
</ul>


<p>Keep in mind that in normal projects:</p>

<ul>
<li>I&#8217;d recommend having a separate helper for CoreData stuff.</li>
<li>findOrCreate should be optimised, doing it per action is too slow when you have lots of them. It&#8217;s quite simple to optimise it but beyond scope of this article.</li>
</ul>


<p>This is how findOrCreate is implemented in ParsingHelper:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObject</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">findOrCreateWithServerType:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverType</span> <span class="nf">serverID:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverID</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Class</span> <span class="n">oClass</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSManagedObject</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">findWithServerType:</span><span class="n">serverType</span> <span class="nl">serverID:</span><span class="n">serverID</span> <span class="nl">inContext:</span><span class="n">context</span> <span class="nl">classForObject:</span><span class="o">&amp;</span><span class="n">oClass</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">obj</span> <span class="o">&amp;&amp;</span> <span class="n">oClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">oClass</span> <span class="nl">MR_createInContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">obj</span> <span class="nl">setValue:</span><span class="n">serverID</span> <span class="nl">forKey:</span><span class="p">[(</span><span class="kt">id</span><span class="p">)</span><span class="n">oClass</span> <span class="n">serverIDPropertyName</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObject</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nf">findWithServerType:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverType</span> <span class="nf">serverID:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverID</span> <span class="nf">inContext:</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="nf">classForObject:</span><span class="p">(</span><span class="n">out</span> <span class="n">Class</span> <span class="o">*</span><span class="p">)</span><span class="nv">oClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Class</span> <span class="n">classForObject</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBParsingHelper</span> <span class="nl">classForServerType:</span><span class="n">serverType</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">oClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">oClass</span> <span class="o">=</span> <span class="n">classForObject</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">classForObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DDLogInfo</span><span class="p">(</span><span class="s">@&quot;Ignoring object with serverType %@ as there is no matching class&quot;</span><span class="p">,</span> <span class="n">serverType</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">AssertTrueOrReturnNilBlock</span><span class="p">([</span><span class="n">self</span> <span class="nl">checkIfClass:</span><span class="n">classForObject</span> <span class="nl">isKindOfClass:</span><span class="n">NSManagedObject</span><span class="p">.</span><span class="n">class</span><span class="p">],</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">oClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">oClass</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">serverIDProperty</span> <span class="o">=</span> <span class="p">[(</span><span class="kt">id</span><span class="p">)</span><span class="n">classForObject</span> <span class="n">serverIDPropertyName</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSManagedObject</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">classForObject</span> <span class="nl">MR_findFirstByAttribute:</span><span class="n">serverIDProperty</span> <span class="nl">withValue:</span><span class="n">serverID</span> <span class="nl">inContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li>We ignore serverTypes that don&#8217;t have a matching class</li>
<li>We assert this parsable object is a managed object since this is a CoreData method.</li>
<li>We try finding an existing object. If one doesn&#8217;t exist but we have found a proper class we use this class to create a new instance.</li>
</ul>


<p>Now all tests pass. Our architecture is finally ready to parse some data.</p>

<h4>Parsing object data</h4>

<p>Let&#8217;s add parsing to our ImageWidget, since we spennt some time creating a nice architecture, it&#8217;s going to be very straightforward.</p>

<p>First let&#8217;s see if we can get our URL parsed correctly and transformed into an NSURL.</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;should create ImageWidget with properly parsed data&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="n">KZBImageWidget</span> <span class="o">*</span><span class="n">imageWidget</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sut</span> <span class="nl">parseData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">valid</span><span class="p">)</span> <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">imageWidget</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBImageWidget</span> <span class="n">MR_findFirst</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="n">imageWidget</span><span class="p">.</span><span class="n">url</span><span class="p">)</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="nl">equal:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://goo.gl/IFSk4C&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>So how hard is it to add support for parsing image widgets with this architecture?</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//! in .h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">KZBImageWidget</span> : <span class="nc">_KZBImageWidget</span> <span class="o">&lt;</span><span class="n">KZBParsableObjectProtocol</span><span class="o">&gt;</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! in .m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">KZBImageWidget</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">serverType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">@&quot;ImageWidget&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateFromDictionary:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dictionary</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;url&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">url</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;caption&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">caption</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>And that&#8217;s it. Pretty simple isn&#8217;t it? You just conform to the protocol, specify the class and describe the mapping.</p>

<h4>Yeah right</h4>

<p>That was really simple data, what if I&#8217;d like to have a CoreData relationship? It&#8217;s probably going to be <em>dreadful and hard</em>?</p>

<p><strong>Not really</strong>.</p>

<p>Let&#8217;s say our server architecture changes and we need to add a relationship between ImageWidget and TextWidget:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;add&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;payload&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;serverId&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;serverType&quot;</span><span class="p">:</span> <span class="s2">&quot;ImageWidget&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://goo.gl/IFSk4C&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nt">&quot;caption&quot;</span> <span class="p">:</span> <span class="s2">&quot;it works!&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nt">&quot;textWidgetId&quot;</span> <span class="p">:</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>How can we change our parsing to handle this? 2 Options:</p>

<ol>
<li>Add boxing in a category to be able to create objects like that, preferable if you need to repeat this kind of mapping in multiple places.</li>
<li>Just use KZCall to create sub-object:</li>
</ol>


<p>First let&#8217;s add test for our new requirement:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;should create ImageWidget with properly parsed relationship&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">isEqual</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">sut</span> <span class="nl">parseData:</span><span class="n">DataForDiffFile</span><span class="p">(</span><span class="n">valid</span><span class="p">)</span> <span class="nl">withCompletion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">KZBImageWidget</span> <span class="o">*</span><span class="n">imageWidget</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBImageWidget</span> <span class="n">MR_findFirst</span><span class="p">];</span>
</span><span class='line'>    <span class="n">KZBTextWidget</span> <span class="o">*</span><span class="n">textWidget</span> <span class="o">=</span> <span class="p">[</span><span class="n">KZBTextWidget</span> <span class="n">MR_findFirst</span><span class="p">];</span>
</span><span class='line'>    <span class="n">isEqual</span> <span class="o">=</span> <span class="n">imageWidget</span> <span class="o">&amp;&amp;</span> <span class="n">imageWidget</span><span class="p">.</span><span class="n">textWidget</span> <span class="o">==</span> <span class="n">textWidget</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[[</span><span class="n">expectFutureValue</span><span class="p">(</span><span class="err">@</span><span class="p">(</span><span class="n">isEqual</span><span class="p">))</span> <span class="n">shouldEventually</span><span class="p">]</span> <span class="n">beTrue</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now we need to update our KZBImageWidget parsing like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateFromDictionary:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dictionary</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;url&quot;</span> <span class="o">:</span> <span class="n">KZBox</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="n">url</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;caption&quot;</span> <span class="o">:</span> <span class="n">KZProperty</span><span class="p">(</span><span class="n">caption</span><span class="p">),</span>
</span><span class='line'>    <span class="s">@&quot;textWidgetId&quot;</span> <span class="o">:</span> <span class="n">KZCall</span><span class="p">(</span><span class="nl">objectForId:</span><span class="p">,</span> <span class="n">textWidget</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectForId:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">serverID</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">AssertTrueOrReturnNil</span><span class="p">([</span><span class="n">serverID</span> <span class="nl">isKindOfClass:</span><span class="n">NSString</span><span class="p">.</span><span class="n">class</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">KZBParsingHelper</span> <span class="nl">findWithServerType:</span><span class="p">[</span><span class="n">KZBWidget</span> <span class="n">serverType</span><span class="p">]</span> <span class="nl">serverID:</span><span class="n">serverID</span> <span class="nl">inContext:</span><span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Looks simple enough?</p>

<ol>
<li>Use KZCall to specify the selector to be called with textWidgetId value, the resulting value should be assigned to the textWidget property.</li>
<li>objectForId method that will query ANY subclass of KZBWidget that has specific serverID.</li>
</ol>


<p>I&#8217;ve implemented objectForId without textWidgetType because you could move this code to KZPropertyMapper as a new boxing and have it used in ALL your relationships if needed.</p>

<p>KZPM offers more than we used here:</p>

<ul>
<li>It does compile time checking for your property / method names</li>
<li>Allows extra simple expansion by using categories</li>
<li>Offers simple validation logic with a custom DSL syntax</li>
</ul>


<p><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Read more at it&#8217;s github page.</a></p>

<h1>Conclusion and what&#8217;s next?</h1>

<p>So now we have fetching capabilities and parsing, how do we connect the two ?</p>

<p>In the next part of this series I&#8217;ll introduce a DataService class(for lack of better name) that coordinates Provider and Parser using composition, it has some simple features like auto-updating, following URL redirections(nextURL) etc.</p>

<p>I&#8217;ll also start connecting our data to UI, so you&#8217;ll be able to see how we can use CoreData to drive our responsive UI with little fuss.</p>

<p><a href="https://github.com/krzysztofzablocki/KZBootstrap">Grab source code from GitHub</a></p>

<p>This was a long article and I really hope you found it at least mildly interesting, <a href="http://twitter.com/merowing_">send me a tweet</a></p>

<h4>Foot notes</h4>

<ul>
<li>In normal projects you should definitely have more tests and they could be refactored a little bit.</li>
<li>This is the general idea, but it&#8217;s a good start, I&#8217;d adapt it to project specific needs.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring tricks]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/refactoring-tricks"/>
    <updated>2014-03-24T12:17:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/refactoring-tricks</id>
    <content type="html"><![CDATA[<p>I believe in boy scout rule: <em>&#8216;Always leave the campground cleaner than you found it.&#8217;</em>, that&#8217;s why I constantly refactor my code so it&#8217;s clean and tidy.</p>

<p>Readability is one of my main concerns when it comes to programming quality. I&#8217;d like to share few less-known refactoring tricks I use to simplify code.</p>

<!-- more -->


<h2>Dictionary mappings</h2>

<p>Let&#8217;s say you have a switch statement that assigns some value:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>     <span class="k">switch</span><span class="p">(</span><span class="n">condition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">value1:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor1&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">value2:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor2&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">value3:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor3&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">value4:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor4&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">value5:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueFor5&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">=</span> <span class="s">@&quot;valueForDefault&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Keep in mind this is just switch for 5 values, imagine one for more.
Let&#8217;s use dictionary mapping to simplify it:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>     <span class="k">static</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">mapping</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mapping</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mapping</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>              <span class="err">@</span><span class="p">(</span><span class="n">value1</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor1&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="err">@</span><span class="p">(</span><span class="n">value2</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor2&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="err">@</span><span class="p">(</span><span class="n">value3</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor3&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="err">@</span><span class="p">(</span><span class="n">value4</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor4&quot;</span>
</span><span class='line'>              <span class="err">@</span><span class="p">(</span><span class="n">value5</span><span class="p">)</span> <span class="o">:</span> <span class="s">@&quot;valueFor5&quot;</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">mapping</span><span class="p">[</span><span class="err">@</span><span class="n">value</span><span class="p">]</span> <span class="o">?:</span> <span class="s">@&quot;valueForDefault&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h3>Pro&#8217;s</h3>

<ul>
<li>Simpler to read, even more so if there are more values in original switch.</li>
<li>Faster, mapping is created only once, then we just do quick lookup of value.</li>
<li>Less prone to errors, since there is no need to do breaks/returns.</li>
<li>Very easy to extract this mapping to some kind of static data like JSON, PLIST file due to nature of the code mapping.</li>
</ul>


<h2>Dynamic Mapping with blocks</h2>

<p>How about more complicated switches, that actually do something dynamic? We can use blocks to simplify the code.</p>

<p>Recently I&#8217;ve had to refactor some code that used stringFormatting for different types:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Scratches&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfScratches</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Scratch&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Scratches&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfScratches</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>     <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Dents&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfDents</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Dent&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Dents&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfDents</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Painted Panels&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfPaintedPanels</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Painted Panel&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Painted Panels&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfPaintedPanels</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Chips&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfChips</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Chip&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Chips&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfChips</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">title</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;Tires&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfTires</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">@&quot;%d Tire&quot;</span> <span class="o">:</span> <span class="s">@&quot;%d Tires&quot;</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vehicle</span><span class="p">.</span><span class="n">numberOfTires</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">title</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>By using block mapping we can refactor it into something like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">titleMapping</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">titleMapping</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="n">NSString</span> <span class="o">*</span><span class="p">(</span><span class="o">^</span><span class="k">const</span> <span class="n">format</span><span class="p">)(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">value</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">singular</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">plural</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%d %@&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">singular</span> <span class="o">:</span> <span class="n">plural</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">titleMapping</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;Scratches&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfScratches</span><span class="p">],</span> <span class="s">@&quot;Scratch&quot;</span><span class="p">,</span> <span class="s">@&quot;Scratches&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">@&quot;Dents&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfDents</span><span class="p">],</span> <span class="s">@&quot;Dent&quot;</span><span class="p">,</span> <span class="s">@&quot;Dents&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">@&quot;Painted Panels&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfPaintedPanels</span><span class="p">],</span> <span class="s">@&quot;Painted Panel&quot;</span><span class="p">,</span> <span class="s">@&quot;Painted Panels&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">@&quot;Chips&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfChips</span><span class="p">],</span> <span class="s">@&quot;Chip&quot;</span><span class="p">,</span> <span class="s">@&quot;Chips&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">@&quot;Tires&quot;</span> <span class="o">:</span> <span class="o">^</span><span class="p">(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="p">([</span><span class="n">target</span> <span class="n">numberOfTires</span><span class="p">],</span> <span class="s">@&quot;Tire&quot;</span><span class="p">,</span> <span class="s">@&quot;Tires&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="p">(</span><span class="o">^</span><span class="n">getTitle</span><span class="p">)(</span><span class="n">MyClass</span> <span class="o">*</span><span class="n">target</span><span class="p">)</span> <span class="o">=</span> <span class="n">titleMapping</span><span class="p">[</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">getTitle</span> <span class="o">?</span> <span class="n">getTitle</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h3>Pro&#8217;s</h3>

<ul>
<li>Safer since there is no way of screwing up if-else chain</li>
<li>Cached mapping since we use static variable</li>
<li>We could easily add a macro to make it even smaller code foot-print and thus easier to expand</li>
</ul>


<p>PS. I could&#8217;ve used string matching to implement it with even less code but I didn&#8217;t think it will make it more readable.</p>

<h2>Simpler flow by using early returns and reversing if&#8217;s</h2>

<p>As you probably figured out by now I don&#8217;t like too many if&#8217;s and I <strong>hate</strong> long if-else chains. Instead I prefer to keep if statements as simple as possible and use early returns.</p>

<p>Instead of:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//! success code</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//! failure code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>I&#8217;d probably write:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//! failure code</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! success code</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h3>Pro&#8217;s</h3>

<ul>
<li>I don&#8217;t need to read further code if I&#8217;m only interested in error case.</li>
<li>In longer code I don&#8217;t need to remember all the flow since I can clearly see early returns/break</li>
</ul>


<h2>Using dynamic method resolution</h2>

<p>Sometimes we might see code similar to this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;videoWidget&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">parseVideoWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;imageWidget&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">parseImageWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;textWidget&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">parseTextWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;twitterWidget&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">parseTwitterWidget:</span><span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>First of all: I could apply all of the above refactorings to this, but this code looks like it&#8217;s prime canditate for future expansion, let&#8217;s see how we can make it even nicer.</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">SEL</span> <span class="n">dynamicSelector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;parse%@:&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">]);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">dynamicSelector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">DDLogWarning</span><span class="p">(</span><span class="s">@&quot;Unsupported widget type %@&quot;</span><span class="p">,</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="n">dynamicSelector</span> <span class="nl">withObject:</span><span class="n">dictionary</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h3>Pro&#8217;s</h3>

<ul>
<li>Very easy to read and understand</li>
<li>Safer than if statements</li>
<li>Easy to expand, I can add new widgets types in categories, eg. when doing a spin-off app I don&#8217;t even need to touch the base class</li>
</ul>


<h2>Conclusion</h2>

<p>I constantly refactor my code, this are just few tricks that are less-known but can be helpful to make your code simpler. I usually write my code in <a href="http://www.jetbrains.com/objc/">AppCode</a> which is a great IDE that has lots of refactoring functions that I use every-day, check it out.</p>

<p>If you have other refactoring tricks that you use often <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7 Most common code issues]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/7-most-common-code-issues"/>
    <updated>2014-03-20T18:34:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/7-most-common-code-issues</id>
    <content type="html"><![CDATA[<p>I do lots of code reviews, what are top 7 most common issues I find?</p>

<!-- more -->


<h1>Commented out code</h1>

<p>It makes me think that you didn&#8217;t learn how to use version control and tagging, why the hell do I need to read that old code, if it&#8217;s no longer valid!?</p>

<p>If it&#8217;s important and you might need to get back to it in the future tag it properly, then remove from current code.</p>

<h1>Useless comments</h1>

<p>Comments that don&#8217;t bring any value, they are obvious or they mark part of code that should be put in a method.</p>

<p><strong>Remember</strong>: comments get outdated very quickly and people don&#8217;t maintain them.</p>

<h1>Empty methods</h1>

<p>A method only calling super is considered empty. Remove it.</p>

<h1>Files are too long</h1>

<p>How can you keep reading file that has over 400 lines of code? It makes my eyes bleed, please use composition, categories or other ways of organising your code.</p>

<p>When I see a file that has so many lines I assume it&#8217;s breaking SRP unless proven otherwise.</p>

<h1>Immutable object properties with wrong qualifiers</h1>

<p>If you have immutable object property that has mutable counterpart, always use copy. Otherwise you can end up having nasty bugs, if someone assigns you mutable counterpart and modified it.</p>

<p><strong>Remember</strong>: if you call copy on immutable object like NSString, it will really only call retain, 0 performance hit.</p>

<h1>Not caring about results</h1>

<p>If you call my API without passing errorHandler, I&#8217;m gonna make you pay dearly(crash). Same goes for completion results.</p>

<p><strong>Remember</strong>: When you create API don&#8217;t allow people to call expensive methods without them caring about results, your users will appreciate longer battery life.</p>

<h1>No assertions or validation</h1>

<p>Assert your assumptions, use asserts to enforce proper API usage or to make sure your assumptions are actually valid. If they are not, you&#8217;ll get to know about that quickly.</p>

<p>If you have other that you find often <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subjective guide to writing iOS Apps - Part 1 Introduction]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/subjective-guide-to-writing-ios-apps-part-1-introduction"/>
    <updated>2014-03-14T11:24:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/03/subjective-guide-to-writing-ios-apps-part-1-introduction</id>
    <content type="html"><![CDATA[<p>This will be subjective look at creating iOS app, first part will focus on basics like project setup, folder structure, version control and some quality metrics.</p>

<!-- more -->


<h2>Project setup</h2>

<p>I usually start with empty project, then I use my <a href="http://github.com/krzysztofzablocki/crafter">crafter</a> gem to apply some default scripts and settings.</p>

<h3>Settings</h3>

<ol>
<li>Copy release configuration as Adhoc</li>
<li>Set debug configuration to use

<ul>
<li>DWARF without DSYM, unnecessary for debug and makes compilation faster</li>
<li>Build Active Architecture Only - faster for debug</li>
</ul>
</li>
<li>Enable lots of extra warnings, along with code analysis.</li>
<li>Add my favourite pods

<ul>
<li><a href="https://github.com/CocoaLumberjack/CocoaLumberjack">Cocoa lumberjack</a></li>
<li><a href="http://www.merowing.info/2013/07/expanded-use-of-asserts/">extended assertions</a></li>
<li>Depending on architecture decision I might add <a href="https://github.com/krzysztofzablocki/KZPropertyMapper">KZPropertyMapper</a></li>
<li>My KZDebug - to be released soon.</li>
<li><a href="https://github.com/supermarin/ObjectiveSugar">Objective Sugar</a></li>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a></li>
</ul>
</li>
</ol>


<h4>Scripts</h4>

<p>There is a set of scripts that I always use.</p>

<ul>
<li><a href="http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/">Icon versioning.</a></li>
<li>Turning todos/hacks into warnings.</li>
</ul>


<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">KEYWORDS</span><span class="o">=</span><span class="s2">&quot;TODO:|FIXME:|\?\?\?:|\!\!\!:&quot;</span>
</span><span class='line'>find <span class="s2">&quot;${SRCROOT}&quot;</span> -name <span class="s2">&quot;*.h&quot;</span> -or -name <span class="s2">&quot;*.m&quot;</span> -print0 | xargs -0 egrep --with-filename --line-number --only-matching <span class="s2">&quot;($KEYWORDS).*\$&quot;</span> | perl -p -e <span class="s2">&quot;s/($KEYWORDS)/ warning: \$1/&quot;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li>Generating warnings when files are longer than N lines.</li>
</ul>


<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find <span class="s2">&quot;${SRCROOT}&quot;</span> <span class="se">\(</span> -name <span class="s2">&quot;*.h&quot;</span> -or -name <span class="s2">&quot;*.m&quot;</span> <span class="se">\)</span> -and <span class="se">\(</span> -path <span class="s2">&quot;${SRCROOT}/Pods/*&quot;</span> -prune -o -print0 <span class="se">\)</span> | xargs -0 wc -l | awk <span class="s1">&#39;$1 &gt; 250 &amp;&amp; $2 != &quot;total&quot; {for(i=2;i&lt;NF;i++){printf &quot;%s%s&quot;, $i, &quot; &quot;} print $NF &quot;:1: warning: File more than 250 lines (&quot; $1 &quot;), consider refactoring.&quot; }&#39;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Most of my project also add other scripts, <a href="http://foldifyapp.com">Foldify</a> does pre-processing and post-processing steps.</p>

<h2>Project structure</h2>

<p>Let&#8217;s start with fact that I use <a href="http://cocoapods.org">CocoaPods</a> for managing dependencies(hate it or love it but @alloy and the team spend lots of their free time to make Cocoapods and you should at least respect that).</p>

<p>Now there are 2 approaches I&#8217;d consider for setting up my project structure, whichever one I&#8217;d choose I&#8217;ll make sure that project grouping in Xcode matches the one on disk perfectly.</p>

<h3>Classic organisation by role division</h3>

<p><img src="http://merowing.info/uploads/2014/03/Folders1.png" width="295"></p>

<p>This way we have separation between Our Code, Resources and Libs that we might use (sometimes Libs outside Cocoapods are needed).</p>

<h4>Pro&#8217;s</h4>

<ul>
<li>Clear separation between file roles in project.</li>
<li>All our code is under Classes folder, which makes it easy to run scripts and advanced code analyses (More on this later in the series).</li>
</ul>


<h4>Con&#8217;s</h4>

<ul>
<li>If you&#8217;d like to move part of the code to other project, is very likely you&#8217;ll need to go to move some Resources along with it.</li>
<li>Keeping resources properly organised requires more work.</li>
</ul>


<h3>Composition / Modular approach</h3>

<p>Other option would be to store code and resources together and group by Features / Modules. eg. if you are working on a widget based app that could make a lot of sense.</p>

<p><img src="http://merowing.info/uploads/2014/03/Folders2.png" width="281"></p>

<h4>Pro&#8217;s</h4>

<ul>
<li>Easy to keep resources and code organised</li>
<li>Forces you think how to implement code so that it avoids dependency</li>
<li>Very simple to reuse module in different project</li>
</ul>


<h4>Con&#8217;s</h4>

<ul>
<li>Resources and code will be close together, so no separation between roles of files</li>
</ul>


<h3>Which one to choose?</h3>

<p>I like to think I&#8217;m a pragmatic programmer, I&#8217;ve used both approaches and believe it depends on the project and the architecture decision you&#8217;ll be making. #1 is more popular in general iOS apps, #2 makes a lot of sense for flexible architectures / frameworks etc.</p>

<p>Try both and make a conscious choice for yourself, maybe hybrid approach makes more sense, Core of the app #1 and some modular part (Widgets?) as #2.</p>

<h2>Source control, Code Reviews &amp; branching strategy</h2>

<p>I&#8217;ve completely moved to git as dvcs, I even use it for important personal documents. Used mercurial before and it wasn&#8217;t bad, but most companies use git and I decided it&#8217;s more useful to master one, especially since git is more powerful.</p>

<p>To make sure code quality is high my teams always use Code Reviews, depending on the size of the project team I&#8217;d say at least 2 reviewers have to accept changes. To be able to employ Code Reviews, one have to use proper branching strategy. I&#8217;ve tried few approaches and my favourite one is <a href="http://nvie.com/posts/a-successful-git-branching-model/">git-flow</a>, it works very well in big and small teams.</p>

<h2>More quality please</h2>

<p>Other techniques I use to make sure quality is good and project can have a long lifetime are:</p>

<h4>BDD</h4>

<p>I like to use <a href="https://github.com/allending/Kiwi">Kiwi</a> When writing tests you&#8217;ll probably need to simulate web-services, we don&#8217;t want to do real requests because tests should give us immediate feedback, <a href="https://github.com/AliSoftware/OHHTTPStubs">I use OHHTTPStubs to make that happen</a></p>

<p>You can also add acceptance tests with something like <a href="https://github.com/kif-framework/KIF">KIF</a>, <a href="https://github.com/moredip/Frank">Frank</a> or <a href="http://calaba.sh/">Calabash</a>. Calabash has advantage as it&#8217;s multi-platform and backed by Xamarin.</p>

<h4>Pair Programming</h4>

<p>This is great technique for solving hard problems and working on the most important parts of your app, there is no point in pairing on UI layout, but when writing core architecture modules in your app there is a HUGE benefit from pairing.</p>

<p>It&#8217;s like live code review, only you learn more from each other, and it doesn&#8217;t matter what level you are. Senior can still learn something new from Junior.</p>

<p>If you are working remotely, like I&#8217;m currently, you can still do pair programming with services like <a href="http://screenhero.com/">Screenhero</a>.</p>

<h4><a href="http://en.wikipedia.org/wiki/Object_composition">Composition</a></h4>

<p>Whatever architecture choice I&#8217;ll select in next part of this series, I&#8217;ll defienietly use <a href="http://en.wikipedia.org/wiki/Object_composition">composition</a>, because it&#8217;s great pattern, it leads to cleaner code, smaller classes, makes it easier to test code and write it with <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> &amp;&amp; <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> principles in mind.</p>

<h2>Up next</h2>

<p>In next part of this series, I&#8217;ll get my hands dirty and look at creating actual code. I&#8217;ll be analyzing different architecture options and looking at libraries that can help us. I&#8217;ll take a swing at some design patterns and best field tested practices.</p>

<p>Until then be sure to <a href="http://twitter.com/merowing_">follow me on twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Tips]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/ios-tips"/>
    <updated>2014-02-20T13:55:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/ios-tips</id>
    <content type="html"><![CDATA[<p>Easy to apply tips that can improve your development workflow.</p>

<!-- more -->


<h2>Know available tools and how to use them.</h2>

<p>I believe you should use best tool for the job, and there are lots of tools that are perfect for specific tasks.
<a href="http://www.merowing.info/2014/02/ios-developer-tools/">This is blog post about tools I use</a></p>

<h2>Write and use code snippets.</h2>

<p>We often write similar code, stuff like dispatch to main thread, dispatch after, KVO etc. Use code snippets for that, this can save you lots of keystrokes and time.</p>

<p>Some of my most used ones would be:</p>

<ul>
<li>properties declarations</li>
<li>dispatch_after usage</li>
<li>init</li>
<li>KVO</li>
<li>weakSelf</li>
<li>Singleton</li>
</ul>


<p>I&#8217;ve asked others on twitter:</p>

<div>
<blockquote class="twitter-tweet" lang="en"><p>iOS devs: What are your most used code snippets?</p>&mdash; Krzysztof Zabłocki (@merowing_) <a href="https://twitter.com/merowing_/statuses/435710935886729216">February 18, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>


<p>Some of the coolest ones I&#8217;ve seen are created by
<a href="https://github.com/kylef/dotfiles/tree/master/Library/Developer/Xcode">Kyle Fuller</a> and
<a href="https://github.com/mattt/Xcode-Snippets">Mattt</a></p>

<p>Just be careful not to break <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY principle</a>.</p>

<h2><a href="http://clang.llvm.org/docs/LanguageExtensions.html">Read clang/gcc documentation</a> to explore some interesting possibilities</h2>

<h3>Examples:</h3>

<ul>
<li><strong>Vector extensions and component swizzle</strong>, useful when doing lots of math.</li>
</ul>


<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">typedef</span> <span class="kt">float</span> <span class="n">float4</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">ext_vector_type</span><span class="p">(</span><span class="mi">4</span><span class="p">)));</span>
</span><span class='line'> <span class="n">float4</span> <span class="n">test</span> <span class="o">=</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">44</span><span class="p">};</span>
</span><span class='line'> <span class="n">test</span><span class="p">.</span><span class="n">xz</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'> <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;test %f %f %f %f&quot;</span><span class="p">,</span> <span class="n">test</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">test</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">test</span><span class="p">.</span><span class="n">z</span><span class="p">,</span> <span class="n">test</span><span class="p">.</span><span class="n">w</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li><strong>C Function overloading</strong> to simplify code, instead of calling fabsf, fabsf you could have (<strong>Obviously</strong> that&#8217;s more interesting for your functions)</li>
</ul>


<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">overloadable</span><span class="p">))</span> <span class="kt">float</span> <span class="n">smart_abs</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;floats&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">fabsf</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">overloadable</span><span class="p">))</span> <span class="kt">double</span> <span class="n">smart_abs</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;doubles&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li><strong>require_super</strong>, useful whenever you are creating base classes and want to make sure your subclasses actually remember to call super.</li>
</ul>


<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">__attribute</span><span class="p">((</span><span class="n">objc_requires_super</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li><p><strong>using braces to have implicit return</strong> (last references value is returned, same as in ruby). <a href="https://github.com/krzysztofzablocki/KZPropertyMapper/blob/master/KZPropertyMapper/KZPropertyMapper.h#L20">I&#8217;m using this in KZPropertyMapper for a neat trick that allows me to execute some arbitrary code and still control returned value</a></p></li>
<li><p><strong><strong>attribute</strong>((constructor))</strong> can be used on C functions for <a href="http://stackoverflow.com/questions/2053029/how-exactly-does-attribute-constructor-work">similar</a> behaviour to +(void)<strong>load</strong>;</p></li>
</ul>


<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">someFunction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//! some code</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h2>Use build phases, scripting and automation for your projects</h2>

<h4>Warnings</h4>

<p>Add this build-phase script AFTER compilation and you will turn all TODO/HACKS etc into warnings (but still be able to use treat warnings as errors)</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">KEYWORDS</span><span class="o">=</span><span class="s2">&quot;TODO:|VERIFY:|FIXME:|\?\?\?:|\!\!\!:&quot;</span>
</span><span class='line'>find <span class="s2">&quot;${SRCROOT}&quot;</span> -name <span class="s2">&quot;*.h&quot;</span> -or -name <span class="s2">&quot;*.m&quot;</span> -print0 | xargs -0 egrep --with-filename --line-number --only-matching <span class="s2">&quot;($KEYWORDS).*\$&quot;</span> | perl -p -e <span class="s2">&quot;s/($KEYWORDS)/ warning: \$1/&quot;</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<h4><a href="http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/">Icon versioning</a></h4>

<p><img class="left" src="http://www.merowing.info/uploads/2013/03/Icon.png" width="114" height="114"></p>

<p>Never again have someone test wrong version of your application.</p>

<h4>Build number</h4>

<p>You can use either very simple script like this one:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">buildNumber</span><span class="o">=</span><span class="k">$(</span>/usr/libexec/PlistBuddy -c <span class="s2">&quot;Print CFBundleVersion&quot;</span> <span class="k">${</span><span class="nv">INFOPLIST_FILE</span><span class="k">})</span>
</span><span class='line'><span class="nv">buildNumber</span><span class="o">=</span><span class="k">$((</span><span class="nv">$buildNumber</span> <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>/usr/libexec/PlistBuddy -c <span class="s2">&quot;Set :CFBundleVersion $buildNumber&quot;</span> <span class="k">${</span><span class="nv">INFOPLIST_FILE</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>or <a href="http://useyourloaf.com/blog/2010/08/18/setting-iphone-application-build-versions.html">do it properly by using agvtool</a></p>

<h4><a href="https://github.com/nst/objc_dep/">Script for graphing dependencies in Cocoa project</a></h4>

<p>Great tool for seeing how tangled is your (or vendor&#8217;s) code, useful for refactoring or checking if agency that just send you some code knows anything about quality coding.</p>

<h2>Use smarter breakpoints</h2>

<h4><a href="https://gist.github.com/krzysztofzablocki/4396302">Log all methods that are executed in your app</a></h4>

<h4>Avoid temporarly modifying code</h4>

<p>Instead you can call NSLog from breakpoints and continue execution.</p>

<p><img src="http://merowing.info/uploads/2014/02/log_breakpoint.png" width="320"></p>

<h4>User space breakpoints</h4>

<p>By promoting breakpoints to <strong>user space</strong> you can have breakpoints that exist only on your machine.</p>

<p><img src="http://merowing.info/uploads/2014/02/user_breakpoint.png" width="320"></p>

<h4>Fast jump to feature you are working on</h4>

<p>By combining above 2 ideas you can execute arbitrary code eg. to enable some feature without modifying code, and you can promote it to user space so <strong>only you</strong> get that behaviour.</p>

<p><img src="http://merowing.info/uploads/2014/02/action_breakpoint.png" width="320"></p>

<h2>More to come</h2>

<p>There is way more tips we could mention, but let&#8217;s leave something for future blog posts.
If you have any questions or suggestions <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fit Geek]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/fit-geek"/>
    <updated>2014-02-10T11:56:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/fit-geek</id>
    <content type="html"><![CDATA[<p>If you ever meet me you probably already know my second biggest passion after programming is Bodybuilding. I used to be a fat kid weighting 105 kg, now I&#8217;m ripped. I don&#8217;t spend my days in gym, neither do I eat raw chicken and eggs. I approach fitness the same way I approach programming, KISS.</p>

<p>Read more to learn how you too can become extra fit without much effort.</p>

<p><strong>NSFW</strong> because I&#8217;ll show my progress photos.</p>

<!-- more -->


<h2>Why you should avoid most blog&#8217;s and fitness trainers</h2>

<p>Let&#8217;s look at some stuff you&#8217;d hear at gym or most blogs:</p>

<ol>
<li>You shouldn&#8217;t skip breakfast</li>
<li>Eat low GI carbs</li>
<li>Eat 5-6 meals a day when cutting</li>
<li>Don&#8217;t eat after 6PM</li>
<li>It&#8217;s cheating when you eat ice-cream, you should feel bad.</li>
<li>Train in higher reps to get &#8216;definition&#8217;</li>
<li>Lots of cardio.</li>
</ol>


<p>What I did:</p>

<ol>
<li>Didn&#8217;t eat breakfast in 2 years</li>
<li>Couldn&#8217;t care less about GI, GI doesn&#8217;t even apply if you eat mixed food, who the hells eat only carbs in a meal?</li>
<li>I prefer 1-2 huge meals when cutting.</li>
<li>I eat around 2000-2500 kcal before sleep.</li>
<li>I had days when I eat 500ml of low fat ice-cream after training. Fat doesn&#8217;t make you fat but after training I prefer to refill glycogen.</li>
<li>Train for strength, you need to spare muscles not &#8216;define&#8217; them.</li>
<li>Cardio? Do you mean sex and walking? that&#8217;s what I did. Cardio is not necessary unless you are already under 10% body fat.</li>
</ol>


<p>You can imagine how fat I got by following that right? WRONG.</p>

<p><img src="http://www.merowing.info/uploads/2014/02/Progress.jpg" alt="progress" />
<a href="http://www.merowing.info/uploads/2014/02/chinups.mov">Me doing chin-ups&#8230; with extra 20kg</a></p>

<p>There are only few authors I&#8217;d recommend you follow if you are interested in dieting:</p>

<ul>
<li>Lyle McDonald - Great diet expert, research based.</li>
<li>Martin Berkhan - Intermittent fasting advocate, my favourite way of cutting fat.</li>
<li>Alan Aragorn - similar to lyle.</li>
</ul>


<h2>How to apply KISS to training?</h2>

<p>I don&#8217;t like wasting time, if you are trying to loose fat you don&#8217;t need to do tons of cardio or spend hours on the gym &#8216;toning&#8217;.</p>

<p>I love simplicity:</p>

<ul>
<li>I prefer do to Intermittent fasting <a href="http://leangains.com">leangains style</a>, it&#8217;s very easy to eat nothing than to eat little. You don&#8217;t need to do it but it&#8217;s easier to control your eating if you only eat 8h a day.</li>
<li>Train hard but short, 3x45-50 min a week Reverse Pyramid Training as recommended by Martin.</li>
<li>Start slow and be patient, you don&#8217;t want to start dieting by eating 1500 kcal, unless you are little girl. Are you?</li>
</ul>


<h3>Supplements</h3>

<ul>
<li>Omega 3 - 2 g EPA, 1.5 g DHA per day</li>
<li>Vitamins - most people have deficiencies, especially when you are in kcal deficit and training hard, <a href="http://www.youtube.com/watch?v=o0u8UdZeOhc">if you believed vitamins are bad</a></li>
<li>Calcium - 800 mg in the morning, 1200 mg in night</li>
<li>BCAA - useful if you train fasted, not necessary otherwise. I prefer Scivation Xtend.</li>
<li>Fat burners - waste of money. Watch your diet.</li>
</ul>


<h3>Eating</h3>

<p>Eat what you like as long as you can hit macros calculated from following diet setup. I like ice-cream and chilli con carne, Chinese chicken with mushrooms etc. Keep in mind that food choices doesn&#8217;t really matter for weight loss but they do for general health, so don&#8217;t just eat at McDonalds. I like to eat 80% least processed food and 20% whatever I like on the specific day.</p>

<p>If you decide to follow IF, I&#8217;d recommend you set-up your eating window at evening, this will make easier to eat with friends when you go out and enjoy life.</p>

<p>I recommend using <a href="http://myfitnesspal.com">MyFitnessPal</a> to track kcal and macros. <a href="http://www.reddit.com/r/leangains/comments/1rkevo/finally_a_way_to_get_custom_macros_on_mfp/">You can use this script to specify macro goals perfectly</a></p>

<h2>Diet setup</h2>

<p>I&#8217;m programmer and most of you are probably as well, so let&#8217;s share a diet <em>algorithm</em> I&#8217;m using for my cutting.</p>

<p>To avoid wasting time and doing manual calculations, I&#8217;d recommend you buy <a href="http://calca.io">calca.io</a> which is a text-based symbolic calculator I&#8217;m using.</p>

<p>Paste following in to calca.io and adjust stats section, you can <a href="http://www.1percentedge.com/ifcalc/">get your TDEE estimate here</a></p>

<p><a href="https://gist.github.com/krzysztofzablocki/8913213">Diet setup to paste in calca.io</a></p>

<p>Key points for this setup:</p>

<ul>
<li>Start slow, no cardio, target for 0.5 kg of FAT loss in a week. You could loose weight way faster, but you don&#8217;t want to loose <strong>weight</strong>, you want to loose <strong>FAT</strong>. Keep your muscles and be patient.</li>
<li>Only increase deficit when you stall for 2 weeks and <strong>not less</strong>. Weight loss is not linear, you might wake up one day and weight 1kg less. If you do increase deficit by 400 kcal (-100 kcal on rest days)</li>
<li>Don&#8217;t go under 1400 kcal (Unless you are a girl, then you could probably go as low as 1100 kcal, but again start slowly.), add some walking instead.</li>
</ul>


<p>If you have any questions, <a href="http://twitter.com/merowing_">send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Developer Tools]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/ios-developer-tools"/>
    <updated>2014-02-07T15:33:00+01:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2014/02/ios-developer-tools</id>
    <content type="html"><![CDATA[<p>I always try to improve my productivity, being more productive means I can spend more time doing stuff I love instead of fighting with bad tools. That&#8217;s probably why I spend lots of money on apps, I enjoy supporting great ideas other people have.</p>

<p>I recently gave talk about tools I use and why, read more to see the video and description of each tool.</p>

<!-- more -->


<p><a href="http://vimeo.com/83794146">Video is available here</a></p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/83794146 "></iframe></div>


<h2>Initial setup</h2>

<h3><a href="https://github.com/krzysztofzablocki/crafter">Crafter</a></h3>

<p>How do you setup your Cocoa projects? Do you always set same warnings, clone configurations and do bunch of other stuff? Or maybe you work in a big company and you are missing some standardised setup?</p>

<p>Programmers tend to automatise boring and repetitive tasks, yet I often see people spending time and time again configuring their Xcode Projects, even thought they always set it up same way.</p>

<p>We all know that Xcode templating system is far from perfect, beside we often use different templates, but same level of warnings, scripts etc.</p>

<p>What if you could define your project setup once (even with optional stuff) then just apply that to all your projects?</p>

<p>That&#8217;s why I&#8217;ve created <strong>Crafter</strong></p>

<h3><a href="http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/">Icon versioning</a></h3>

<p>Ever had someone testing wrong version of the app?
This little build-phase script will let you know if someone is running old version of your application.</p>

<h2>Day to day use</h2>

<h3><a href="http://www.jetbrains.com/objc/">AppCode</a></h3>

<p>If you don&#8217;t know what AppCode is, you are about to have your world shaken up.</p>

<p>AppCode is probably best IDE I&#8217;ve had pleasure to work with, it has extensive amount of small features that will improve your workflow by a ton. Let&#8217;s just name a few:</p>

<ul>
<li>Reliable and efficient refactoring, Xcode can&#8217;t even compare.</li>
<li>Code quality tracking beyond just LLVM.</li>
<li>Code navigation that let&#8217;s you find contextual uses and much much more.</li>
<li>Diff and merging integrated so well that even Kaleidoscope can&#8217;t compare.</li>
<li>Plugins. Official supported plugins that is.</li>
<li>Powerful code formatting setup, define once, apply everywhere, every time.</li>
<li>Contextual snippets.</li>
</ul>


<p>Java might put you away from this, but you really deserve to force yourself and use it for a week, I hate Java and I love AppCode.</p>

<h3><a href="http://krillapps.com/coderunner/">CodeRunner</a></h3>

<p>Great tool for testing snippets of code in many languages, no need to create a project to play with some small algorithm. Great little time saver.</p>

<h3><a href="http://kapeli.com/dash">Dash</a></h3>

<p>Fastest documentation browser available, really impressive UIX and ease of use. Integrates well with AppCode.</p>

<h3><a href="http://xscopeapp.com/">xScope</a></h3>

<p>Great set of tools that can help you save lots of time when working with designs, it can even simulate user vision problems like colour blindness.</p>

<h3><a href="http://twelvetwenty.nl/apps/uberlayer">UberLayer</a></h3>

<p>Simplest way to check if your designs are pixel perfect.</p>

<h3><a href="http://wafflesoftware.net/hexpicker/">Hex Color Picker</a></h3>

<p>Add hex support in all OSX colour pickers, how many times did you get colours in hex and had to use some website to translate that to RGB to use it in Interface Builder? Enough of that.</p>

<h3><a href="http://www.myfonts.com/WhatTheFont/">What The Font</a></h3>

<p>Ever saw a font you loved but could&#8217;t find the name? Here&#8217;s the tool you need.</p>

<h3><a href="http://injectionforxcode.com/">Code injection</a></h3>

<p>Great plugin that let&#8217;s your recompile single file you are working on. If you do small changes and need to see them running in your app, eg. graphics or physics adjustments this will save you <strong>hours</strong>.</p>

<h3><a href="http://hockeyapp.net/releases/hockeycoach/">HockeyCoach</a></h3>

<p>Great way to view crash reports. Connects to your repository and hockey account and gives you great aggregation of crashes, stack traces and many other features. Finding what made the app crash is a lot less painful.</p>

<h3><a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter</a></h3>

<p>This great plugin allows you to add documentation comments in Xcode with ease, it&#8217;s like code snippet but on steroids. It grabs names from the code you want documented and enters template for you to fill in.</p>

<h3><a href="https://github.com/fpillet/NSLogger">NSLogger</a></h3>

<p>Best iOS/OSX logger I&#8217;ve seen to date, filtering, tagging, logging images and binary data and much much more. All wirelessly over bonjour.</p>

<h3><a href="https://itunes.apple.com/us/app/patterns-the-regex-app/id429449079?mt=12">Patterns</a></h3>

<p>Simple but powerful tool for creating regular expressions. I never remember syntax, do you? This makes my life easier.</p>

<h3><a href="https://itunes.apple.com/pl/app/watchdog-for-xcode/id734258109?mt=12">WatchDog</a></h3>

<p>Ever had problem with wrong symbols? Had to remove derived data as a solution? This little tool will monitor your actions and do proper clean when you clean in Xcode. It can also release lots of space from your Macbook as Derived data tends to grow quite large.</p>

<h2>Debugging</h2>

<h3><a href="http://www.charlesproxy.com/">Charles</a></h3>

<p>Best way to verify network connectivity in your apps or doing some hacking on someone else&#8217;s app. Works as a proxy between your app and network and lets you see all data connections.</p>

<h3><a href="http://revealapp.com/">Reveal</a></h3>

<p>Great tool for inspecting UI problems, it can even modify your UI in real-time, thus allowing you to find issues quicker.</p>

<h2>Other tools</h2>

<h3><a href="http://wasted.werk01.de/">Wasted</a></h3>

<p>Nice tool that helps to check how much space are your images wasting and optimise it.</p>

<p>We tend to use PNG&#8217;s everywhere but that&#8217;s not always optimal, this tool will show you why.</p>

<h3><a href="https://itunes.apple.com/us/app/slender/id493656257?mt=12">Slender</a></h3>

<p>Find unused assets or mismatched dimensions in your apps.</p>

<h3><a href="http://usetokens.com/">Tokens</a></h3>

<p>This is my favourite tool for redeem codes, great UIX and effective tracking of who and when used your code, if they didn&#8217;t you can reuse your code.</p>

<h3><a href="https://gist.github.com/skeeet/2367298">RamDisk</a></h3>

<p>This script will let you create ramdisk for iOS sim, derived data a few other important folders. This can make your development wayyy faster.</p>

<p>Make sure you check out those tools, I&#8217;d love to hear your opinions and other tools you find useful.</p>

<p><a href="http://twitter.com/merowing_">Send me a tweet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop writing data parsing code in your Apps.]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/stop-writing-data-parsing-code-in-your-apps"/>
    <updated>2013-07-25T06:16:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/stop-writing-data-parsing-code-in-your-apps</id>
    <content type="html"><![CDATA[<p>Data parsing is one of most common tasks we need to do in our apps, yet still majority of people do this parsing by hand, always repeating the same code for each class they need to map.</p>

<p>Usual parsing requires this steps:</p>

<ul>
<li>make sure you translate NSNull to nil and not crash</li>
<li>gracefully handle optional params</li>
<li>do type conversions</li>
</ul>


<p>I&#8217;ll show show you how you could simplify your code, with very lightweight pattern (0 Dependendencies).
<a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Or just jump straight to github repo</a></p>

<!-- more -->


<h2>Why Property Mapper?</h2>

<p>There are libraries helping with that like Mantle, RESTKit and many more… But I wanted something that&#8217;s self contained, easy to change / remove and requires minimal amount of code.</p>

<p>I&#8217;ve created <strong>Property Mapper</strong> as part of working on <a href="http://foldifyapp.com">Foldify</a>, a simple self contained class that allows you to specify mapping between data you receive and data representation you have in your application. With some additional features.</p>

<p>I don&#8217;t like passing around JSON so I write parsing on top of native objects like NSDictionary/NSArray.
If you get data as JSON just write a simple category that transforms JSON to native objects using NSJSONSerialization.</p>

<h2>Example usage</h2>

<p>Let&#8217;s assume you have object like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">KZPropertyTestObject</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">contentURL</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURL</span> <span class="o">*</span><span class="n">videoURL</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">uniqueID</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>and you receive data from server in this format:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="s">@&quot;http://test.com/video.mp4&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="s">@&quot;Some Cool Video&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">],</span>
</span><span class='line'>  <span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>          <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="mi">616</span><span class="p">,</span>
</span><span class='line'>          <span class="s">@&quot;arbitraryData&quot;</span> <span class="o">:</span> <span class="s">@&quot;data&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>this is the code you would write in your parsing code:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">KZPropertyMapper</span> <span class="nl">mapValuesFrom:</span><span class="n">dictionary</span> <span class="nl">toInstance:</span><span class="n">self</span> <span class="nl">usingMapping:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>   <span class="s">@&quot;videoURL&quot;</span> <span class="o">:</span> <span class="s">@&quot;@URL(contentURL)&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">@&quot;name&quot;</span> <span class="o">:</span> <span class="s">@&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="s">@&quot;type&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">@&quot;sub_object&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>         <span class="s">@&quot;title&quot;</span> <span class="o">:</span> <span class="s">@&quot;uniqueID&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Quite obvious what it does but in case you are confused, it will translate videoURL string to contentURL NSURL object, it will also grab title from sub_object and assign it to uniqueID. It also handles NSNull.</p>

<h2>Advanced usage</h2>

<p>Let&#8217;s now change our mind and decide that we want our type property to be typedef enumeration, it&#8217;s quite easy with KZPropertyMapper, change type mapping to following and add following method:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;videoType&quot;</span> <span class="o">:</span> <span class="s">@&quot;@Selector(videoTypeFromString:, type)&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//! implemented on instance you are parsing</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nl">videoTypeFromString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">type</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;shortVideo&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">VideoTypeShort</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">VideoTypeLong</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Done. Same approach will work for sub-object instances or anything that you can assign to property.</p>

<h3>Referencing arrays items</h3>

<p>If your data comes to you in ordered array instead of dictionaries you can reference that as well:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">sourceData</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;sub_object_array&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;test&quot;</span><span class="p">,</span> <span class="err">@</span><span class="mi">123</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="p">{</span><span class="s">@&quot;sub_object_array&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">{</span><span class="err">@</span><span class="mi">1</span> <span class="o">:</span> <span class="s">@&quot;uniqueID&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>This will grab first item from sub_object_array and assign it to uniqueID. It also works recursively.</p>

<h3>Expanding boxing capabilities</h3>

<p>You can expand boxing capabilities across whole application easily, just add category on KZPropertyMapper that implements methods like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">boxValueAsType:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//! your boxing</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now you can use @Type mapping everywhere in your code.</p>

<h1>Final note</h1>

<p>Unit tests should serve as documentation. Default boxing types include @URL and @Date.
CocoaPods spec will follow shortly. For now you can just add KZPropertyMapper.h / m to your project, ARC only.</p>

<p><a href="https://github.com/krzysztofzablocki/KZPropertyMapper">Github repo</a></p>

<p><a href="http://twitter.com/merowing_">Follow me on twitter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expanded use of Asserts]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/expanded-use-of-asserts"/>
    <updated>2013-07-03T19:23:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2013/07/expanded-use-of-asserts</id>
    <content type="html"><![CDATA[<p>Do you use assertions in your code? What for? How do you handle release builds ?</p>

<p>I&#8217;ll share my current take on those questions and some interesting code snippet.</p>

<!-- more -->


<h3>Assertions, when should I use them ?</h3>

<h2>Update</h2>

<p><a href="https://github.com/krzysztofzablocki/KZAsserts">New version of assert macros and more reasoning behind it is available here</a></p>

<p>Assertions are one of the oldest ways of making sure that code works the way we think it does.</p>

<p>Which means we should be adding assertions on all assumptions we make.</p>

<p>I believe we should also use Assertions as contracts when designing our API&#8217;s, e.g. I don&#8217;t believe any expensive operation should happen if you don&#8217;t care about results (completionBlock being only way to get results here), so I&#8217;ll make sure that developer using my API cares.</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">expensiveOperationWithCompletion:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">,</span> <span class="kt">id</span><span class="p">))</span><span class="nv">completion</span> <span class="p">{</span>
</span><span class='line'><span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">completion</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Most people would only use assertions when checking our own assumptions, but I&#8217;m big fan of <em>&#8220;Crash Early, Crash Often&#8221;</em> and so I tend to write more asserts than most people, one place when I add extra assertions is integration points, especially with data coming from server.</p>

<p>E.g. I&#8217;m expecting to get Dictionary inside Array not the other way around. If I crash I&#8217;ll know straight away that backend developer has changed something and didn&#8217;t notify me.</p>

<h3>How should I handle user-facing release builds?</h3>

<p>User should never see crash if possible, the only crash I can accept is when there is unavoidable data corruption if we don&#8217;t crash, which is pretty much always avoidable, especially with my approach.</p>

<p>So how people handle release builds ? They are <em>2 camps here</em>, some people strip asserts on release builds (<em>Apple</em> does that by default in Xcode), some people think you should have them on release as well (<a href="http://www.mikeash.com/pyblog/friday-qa-2013-05-03-proper-use-of-asserts.html"><em>mikeash</em> does that</a>).</p>

<p>I think you should strip assertions on release builds, but I also think just striping them is wrong, especially with the extended way I&#8217;m using them. What if you assert when working with data coming from server and server changes ?</p>

<p>It&#8217;s gonna crash because some of your code expected something else, this is <strong>very bad UIX</strong>.</p>

<h3>How you could handle Assert on server integration parts?</h3>

<p>One could advocate that you might solve this problem like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSParameterAssert</span><span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]]);</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">dataFromServer</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//! release code</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>By striping asserts in release you&#8217;d get just the if happening. I think code like this is <em>hard to maintain</em>, leads to a lot of repetitions, I also belive you should also be generating some errors in that if statement or you won&#8217;t know that something is wrong in release build.</p>

<p>Now imagine that most integration code would require multiple asserts (easily 5+), that&#8217;s a lot of code that you <strong>don&#8217;t want to write</strong>.</p>

<h3>How I want assertions to work ?</h3>

<p>My preferred assertions should work as follows:</p>

<ul>
<li>Crash on debug, crash early crash often. I want to know if there is any problem with my code.</li>
<li>Never crash on release, don&#8217;t break code flow if something unexpected happens, even on asynchronous code.</li>
<li>Generate and log error automatically when using release builds.</li>
<li>Write as little code as possible.</li>
</ul>


<p>For those reasons <strong>I&#8217;ve implemented my own macros for Assertions</strong>,  that&#8217;s how the simplest one looks like:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define AssertTrueOrReturn(condition) do {\</span>
</span><span class='line'><span class="cp">NSAssert((condition), @&quot;Invalid condition not satisfying: %s&quot;, #condition);\</span>
</span><span class='line'><span class="cp">    if(!(condition)) { </span>
</span><span class='line'>      <span class="n">pixle_NSErrorMake</span><span class="p">([</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Unexpected behaviour not satisfying: %s&quot;</span><span class="p">,</span> <span class="err">#</span><span class="n">condition</span><span class="p">],</span> <span class="n">kErrorCodeInternal</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>\
</span><span class='line'>    <span class="p">}</span> <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Let me explain how it works:</p>

<ul>
<li>do {} while(0) is a common C trick to get compiler to accept <strong>;</strong> at the end of macro without complaining.</li>
<li>we use NSAssert as our base assertions, works in debug, stripped in release.</li>
<li>if statement executes only on release (debug already crashed).</li>
<li>if release build has unexpected behaviour, it will generate error automatically from failed condition.</li>
<li>pixle_NSErrorMake is just helper method for error creation, which also logs that error.</li>
<li>code will return after logging that error.</li>
</ul>


<p>But that&#8217;s the simplest assertion macro I&#8217;ve implemented, one that&#8217;s way more interesting to use is this one, shown here as usage example:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">AssertTrueOrReturnBlock</span><span class="p">(</span><span class="n">userInfo</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">completionBlock</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>This macro will assert code, call block with automatically generated error and then return from code scope. Which makes it work with async code.</p>

<p>Whole set of asserts are as follows:</p>

<ul>
<li>AssertTrueOrReturn &lt;- assert + return;</li>
<li>AssertTrueOrReturnNil &lt;- assert + return nil;</li>
<li>AssertTrueOrReturnBlock &lt;- assert + execute block + return;</li>
<li>AssertTrueOrReturnNilBlock &lt;- assert + execute block + return nil;</li>
<li>AssertTrueOrReturnError &lt;- assert + execute block + return error;</li>
</ul>


<p>You can see how to implement all of this macros <a href="https://gist.github.com/krzysztofzablocki/5921645">under this gist</a></p>

<p>I&#8217;m <a href="http://twitter.com/merowing_">merowing_ on twitter</a> if you want to chat about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crafter - setup your Cocoa projects with ease]]></title>
    <link href="http://krzysztofzablocki.github.com/krzysztofzablocki/2013/05/crafter-setup-your-cocoa-projects-with-ease"/>
    <updated>2013-05-02T09:31:00+02:00</updated>
    <id>http://krzysztofzablocki.github.com/krzysztofzablocki/2013/05/crafter-setup-your-cocoa-projects-with-ease</id>
    <content type="html"><![CDATA[<p>How do you setup your Cocoa projects? Do you always set same warnings, clone configurations and do bunch of other stuff? Or maybe you work in a big company and you are missing some standardised setup?</p>

<p>Programmers tend to automatise boring and repetitive tasks, yet I often see people spending time and time again configuring their Xcode Projects, even thought they always set it up same way.</p>

<!-- more -->


<p>We all know that Xcode templating system is far from perfect, beside we often use different templates, but same level of warnings, scripts etc.</p>

<p>What if you could define your project setup once (even with optional stuff) then just apply that to all your projects?</p>

<h2>Enter crafter</h2>

<p>That&#8217;s why I&#8217;ve created <strong>crafter</strong>, a ruby gem that you can install, setup your configuration once and enjoy hours of time saved.</p>

<h3>So how does it work?</h3>

<p>Install it by calling:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install crafter
</span><span class='line'>crafter reset
</span></code></pre></td></tr></table></div></figure>
</div>


<p>this will create your personal configuration file at <strong>~/.crafter.rb</strong></p>

<p>now open that file with your favourite editor and you will see default configuration, along with description of different parts:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="ss">Crafter</span><span class="p">:</span><span class="ss">:ROOT</span><span class="si">}</span><span class="s2">/config/default_scripts.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All your configuration should happen inside configure block</span>
</span><span class='line'><span class="no">Crafter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># This are projects wide instructions</span>
</span><span class='line'>  <span class="n">add_platform</span><span class="p">({</span><span class="ss">:platform</span> <span class="o">=&gt;</span> <span class="ss">:ios</span><span class="p">,</span> <span class="ss">:deployment</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="o">.</span><span class="mi">0</span><span class="p">})</span>
</span><span class='line'>  <span class="n">add_git_ignore</span>
</span><span class='line'>  <span class="n">duplicate_configurations</span><span class="p">({</span><span class="ss">:adhoc</span> <span class="o">=&gt;</span> <span class="ss">:debug</span><span class="p">,</span> <span class="ss">:profiling</span> <span class="o">=&gt;</span> <span class="ss">:debug</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># set of options, warnings, static analyser and anything else normal xcode treats as build options</span>
</span><span class='line'>  <span class="n">set_options</span> <span class="sx">%w(</span>
</span><span class='line'><span class="sx">    GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED</span>
</span><span class='line'><span class="sx">    GCC_WARN_MISSING_PARENTHESES</span>
</span><span class='line'><span class="sx">    GCC_WARN_ABOUT_RETURN_TYPE</span>
</span><span class='line'><span class="sx">    GCC_WARN_SIGN_COMPARE</span>
</span><span class='line'><span class="sx">    GCC_WARN_CHECK_SWITCH_STATEMENTS</span>
</span><span class='line'><span class="sx">    GCC_WARN_UNUSED_FUNCTION</span>
</span><span class='line'><span class="sx">    GCC_WARN_UNUSED_LABEL</span>
</span><span class='line'><span class="sx">    GCC_WARN_UNUSED_VALUE</span>
</span><span class='line'><span class="sx">    GCC_WARN_UNUSED_VARIABLE</span>
</span><span class='line'><span class="sx">    GCC_WARN_SHADOW</span>
</span><span class='line'><span class="sx">    GCC_WARN_64_TO_32_BIT_CONVERSION</span>
</span><span class='line'><span class="sx">    GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS</span>
</span><span class='line'><span class="sx">    GCC_WARN_UNDECLARED_SELECTOR</span>
</span><span class='line'><span class="sx">    GCC_WARN_TYPECHECK_CALLS_TO_PRINTF</span>
</span><span class='line'>
</span><span class='line'><span class="sx">    RUN_CLANG_STATIC_ANALYZER</span>
</span><span class='line'><span class="sx">    GCC_TREAT_WARNINGS_AS_ERRORS</span>
</span><span class='line'><span class="sx">  )</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># target specific options, :default is just a name for you, feel free to call it whatever you like</span>
</span><span class='line'>  <span class="n">with</span> <span class="ss">:default</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># each target have set of pods</span>
</span><span class='line'>    <span class="n">pods</span> <span class="o">&lt;&lt;</span> <span class="sx">%w(NSLogger-CocoaLumberjack-connector TestFlightSDK)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># each target can have optional blocks, eg. crafter will ask you if you want to include networking with a project</span>
</span><span class='line'>    <span class="n">add_option</span> <span class="ss">:networking</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pods</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;AFNetworking&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_option</span> <span class="ss">:coredata</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pods</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;MagicalRecord&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># each target can have shell scripts added, in this example we are adding my icon versioning script as in http://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/</span>
</span><span class='line'>    <span class="n">scripts</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;icon versioning&#39;</span><span class="p">,</span> <span class="ss">:script</span> <span class="o">=&gt;</span> <span class="no">Crafter</span><span class="o">.</span><span class="n">icon_versioning_script</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># we can also execute arbitrary ruby code when configuring our projects, here we rename all our standard icon* to icon_base for versioning script</span>
</span><span class='line'>    <span class="n">icon_rename</span> <span class="o">=</span> <span class="nb">proc</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">extension</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>      <span class="n">file_name</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">extension</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">_base</span><span class="si">#{</span><span class="n">extension</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;**/Icon.png&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">icon_rename</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;**/Icon@2x.png&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">icon_rename</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;**/Icon-72.png&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">icon_rename</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;**/Icon-72@2x.png&#39;</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">icon_rename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># more targets setup</span>
</span><span class='line'>  <span class="n">with</span> <span class="ss">:tests</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">add_option</span> <span class="ss">:kiwi</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pods</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;Kiwi&#39;</span>
</span><span class='line'>      <span class="n">scripts</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;command line unit tests&#39;</span><span class="p">,</span> <span class="ss">:script</span> <span class="o">=&gt;</span> <span class="no">Crafter</span><span class="o">.</span><span class="n">command_line_test_script</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>As you can see the configuration files is quite easy, yet is pretty flexible.
Once you set it up as you see fit, go to your project folder (the one with xcodeproj, workspace etc.) and call:</p>

<div>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crafter
</span></code></pre></td></tr></table></div></figure>
</div>


<p>it will guide you through project setup, with default configuration it would look like this:</p>

<div>
<button class='toggle-code' title='show'>Show Code</button><figure class='code hide'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1. sample
</span><span class='line'>2. sampleTests
</span><span class='line'>Which target should I use <span class="k">for </span>default?
</span><span class='line'>1
</span><span class='line'>1. sample
</span><span class='line'>2. sampleTests
</span><span class='line'>Which target should I use <span class="k">for </span>tests?
</span><span class='line'>2
</span><span class='line'><span class="k">do </span>you want to add networking? <span class="o">[</span>Yn<span class="o">]</span>
</span><span class='line'>n
</span><span class='line'><span class="k">do </span>you want to add coredata? <span class="o">[</span>Yn<span class="o">]</span>
</span><span class='line'>y
</span><span class='line'><span class="k">do </span>you want to add testing? <span class="o">[</span>Yn<span class="o">]</span>
</span><span class='line'>n
</span><span class='line'>duplicating configurations
</span><span class='line'>setting up variety of options
</span><span class='line'>preparing git ignore
</span><span class='line'>preparing pod file
</span><span class='line'>adding scripts
</span><span class='line'>Finished.
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Now your project should have all options applied, generated Podfile (call pod install or set it up in your configuration).</p>

<p>I&#8217;m learning Ruby, so I&#8217;m looking forward to pull requests on <a href="https://github.com/krzysztofzablocki/crafter">GitHub</a></p>

<p>Send me your thoughts, I&#8217;m <a href="http://twitter.com/merowing_">merowing_ on twitter</a></p>

<h4>Acknowledgements:</h4>

<p><a href="http://theappbusiness.com">The App Business</a> (the company I work for) for supporting my idea and caring about work quality.</p>

<p>to <a href="http://twitter.com/alloy">@alloy</a>, <a href="http://twitter.com/orta">@orta</a>, <a href="http://twitter.com/romainbriche">@romainbriche</a> - for taking some of their valuable time and sharing their thoughts about beta version.</p>

<p>Inspired by <a href="https://github.com/thoughtbot/liftoff">liftoff</a></p>
]]></content>
  </entry>
  
</feed>
